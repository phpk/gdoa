{"version":3,"sources":["../../src/implementation/constants.ts","../../src/implementation/error.ts","../../src/implementation/string.ts","../../src/implementation/taskenums.ts","../../src/implementation/xhrio.ts","../../src/implementation/xhrio_network.ts","../../src/implementation/xhriopool.ts","../../src/implementation/location.ts","../../src/implementation/failrequest.ts","../../src/implementation/type.ts","../../src/implementation/url.ts","../../src/implementation/request.ts","../../src/implementation/backoff.ts","../../src/implementation/fs.ts","../../src/implementation/blob.ts","../../src/implementation/json.ts","../../src/implementation/path.ts","../../src/implementation/metadata.ts","../../src/implementation/list.ts","../../src/implementation/requestinfo.ts","../../src/implementation/requests.ts","../../src/implementation/observer.ts","../../src/implementation/async.ts","../../src/task.ts","../../src/reference.ts","../../src/service.ts","../../exp/api.ts","../../compat/tasksnapshot.ts","../../compat/task.ts","../../compat/list.ts","../../compat/reference.ts","../../compat/service.ts","../../index.ts"],"names":["DEFAULT_HOST","code","message","prependCode","customData","serverResponse","Object","setPrototypeOf","FirebaseStorageError","prototype","_codeEquals","this","unknown","cannotSliceBlob","invalidArgument","appDeleted","invalidRootOperation","name","invalidFormat","format","internalError","StringFormat","RAW","BASE64","BASE64URL","DATA_URL","data","contentType","dataFromString","stringData","StringData","utf8Bytes_","base64Bytes_","dataUrl","parts","DataURLParts","base64","rest","value","decoded","decodeURIComponent","e","percentEncodedBytes_","dataURLBytes_","b","i","length","c","charCodeAt","push","Uint8Array","hasMinus","indexOf","hasUnder","hasPlus","hasSlash","replace","bytes","atob","array","dataURL","matches","match","middle","s","end","substring","ErrorCode","TaskEvent","STATE_CHANGED","TaskState","RUNNING","PAUSED","SUCCESS","CANCELED","ERROR","taskStateFromInternalTaskState","state","sent_","xhr_","XMLHttpRequest","errorCode_","NO_ERROR","sendPromise_","Promise","resolve","addEventListener","ABORT","NETWORK_ERROR","send","url","method","body","headers","open","undefined","key","hasOwnProperty","setRequestHeader","toString","getErrorCode","getStatus","status","getResponseText","responseText","abort","getResponseHeader","header","addUploadProgressListener","listener","upload","removeUploadProgressListener","removeEventListener","createXhrIo","NetworkXhrIo","bucket","path","path_","fullServerUrl","encode","encodeURIComponent","bucketOnlyServerUrl","makeFromBucketSpec","bucketString","bucketLocation","Location","makeFromUrl","location","bucketDomain","gsRegex","RegExp","httpModify","loc","firebaseStorageHost","groups","regex","indices","postModify","charAt","slice","group","captures","exec","bucketValue","pathValue","invalidUrl","error","promise_","reject","getPromise","cancel","_appDelete","isString","p","String","isNativeBlob","isNativeBlobDefined","Blob","validateNumber","argument","minValue","maxValue","makeUrl","urlPart","makeQueryString","params","queryPart","successCodes","additionalRetryCodes","callback","errorCallback","timeout","progressCallback","pool","pendingXhr_","backoffId_","canceled_","appDelete_","url_","method_","headers_","body_","successCodes_","additionalRetryCodes_","callback_","errorCallback_","progressCallback_","timeout_","pool_","resolve_","reject_","start_","self","backoffDone","requestWentThrough","err","xhr","wasSuccessCode","result","canceled","RequestEndStatus","f","waitSeconds","timeoutId","hitTimeout","cancelState","triggeredCallback","triggerCallback","apply","args","callWithDelay","millis","setTimeout","handler","success","call","waitMillis","Math","random","stopped","stop","wasTimeout","clearTimeout","start","backoffCallback","progressListener","then","hitServer","isRetryStatusCode_","successCode","wasCanceled","progressEvent","loaded","total","lengthComputable","appDelete","isFiveHundredCode","isExtraRetryCode","isRequestSpecificRetryCode","getBlobBuilder","BlobBuilder","WebKitBlobBuilder","getBlob","bb","append","elideCopy","size","blobType","data_","type","ArrayBuffer","byteLength","set","size_","type_","startByte","endByte","sliced","blob","webkitSlice","mozSlice","sliceBlob","FbsBlob","buffer","blobby","map","val","uint8Arrays","forEach","uploadData","jsonObjectOrNull","obj","JSON","parse","Array","isArray","lastComponent","index","lastIndexOf","noXform_","metadata","server","local","writable","xform","mappings_","getMappings","mappings","Mapping","nameMapping","_metadata","fullPath","xformPath","sizeMapping","Number","fromResource","service","resource","len","mapping","defineProperty","get","_makeStorageReference","addRef","fromResourceString","resourceString","toResourceString","stringify","fromResponseString","listResult","prefixes","items","nextPageToken","pathWithoutTrailingSlash","reference","item","fromBackendResponse","urlParams","errorHandler","handlerCheck","cndn","metadataHandler","text","downloadUrlHandler","tokens","split","token","alt","downloadUrlFromResourceString","sharedErrorHandler","newErr","objectErrorHandler","shared","getMetadata","maxOperationRetryTime","requestInfo","RequestInfo","list","delimiter","pageToken","maxResults","isRoot","listHandler","metadataForUpload_","metadataClone","assign","determineContentType_","current","finalized","checkResumeHeader_","allowed","RESUMABLE_UPLOAD_CHUNK_SIZE","continueResumableUpload","chunkSize","status_","ResumableUploadStatus","bytesLeft","bytesToUpload","min","maxUploadRetryTime","uploadStatus","newCurrent","nextOrObserver","complete","next","observer","argsToForward","ref","_transferred","_needToFetchStatus","_needToFetchMetadata","_observers","_error","_uploadUrl","_request","_chunkMultiplier","_resolve","_reject","_ref","_blob","_mappings","_resumable","_shouldDoResumable","_state","_errorHandler","completeTransitions_","_transition","_metadataErrorHandler","_promise","_start","_makeProgressCallback","sizeBefore","_updateProgress","_createResumable","_fetchStatus","_fetchMetadata","_continueUpload","_oneShotUpload","_resolveToken","storage","_getAuthToken","authToken","metadataForUpload","createResumableUpload","_location","createRequest","_makeRequest","sizeString","isNaN","getResumableUploadStatus","statusRequest","uploadRequest","newStatus","_increaseMultiplier","metadataRequest","boundary","str","genBoundary","metadata_","preBlobPart","postBlobPart","multipartUpload","multipartRequest","transferred","old","_notifyObservers","wasPaused","externalState","bytesTransferred","totalBytes","task","on","completed","Observer","_addObserver","_removeObserver","onFulfilled","onRejected","catch","_notifyObserver","splice","_finishPromise","triggered","fbsAsync","bind","snapshot","resume","valid","pause","_service","_newRef","Reference","newPath","_throwIfRoot","listAll","accumulator","listAllHelper","nextPage","options","op","requestsList","updateMetadata","requestsUpdateMetadata","getDownloadURL","requestsGetDownloadUrl","deleteObject","_xhr","_text","requestsDeleteObject","_getChild","childPath","canonicalChildPath","filter","component","join","child","isUrl","test","refFromPath","_bucket","includes","serviceOrRef","pathOrUrl","app","_authProvider","_pool","_url","_firebaseVersion","_appId","_deleted","_maxOperationRetryTime","_maxUploadRetryTime","_requests","Set","config","extractBucket","time","POSITIVE_INFINITY","auth","getImmediate","optional","getToken","tokenData","accessToken","_delete","request","clear","FailRequest","appId","firebaseVersion","addGmpidHeader_","addAuthHeader_","addVersionHeader_","NetworkRequest","makeRequest","add","delete","uploadBytesResumable","UploadTask","uploadBytesResumableInternal","requestsGetMetadata","getMetadataInternal","refInternal","_delegate","UploadTaskSnapshotCompat","wrappedNextOrObserver","taskSnapshot","ReferenceCompat","_getChildInternal","root","parent","put","UploadTaskCompat","putString","_UploadTask","_FbsBlob","listAllInternal","r","ListResultCompat","listInternal","updateMetadataInternal","getDownloadURLInternal","deleteObjectInternal","INTERNAL","refFromURL","_Location","setMaxUploadRetryTime","setMaxOperationRetryTime","factory","container","getProvider","authProvider","StorageServiceCompat","XhrIoPool","SDK_VERSION","instance","namespaceExports","Storage","registerComponent","setServiceProps","setMultipleInstances","registerVersion","registerStorage"],"mappings":"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","file":"static/js/56.ce672e10.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Constants used in the Firebase Storage library.\n */\n\n/**\n * Domain name for firebase storage.\n */\nexport const DEFAULT_HOST = 'firebasestorage.googleapis.com';\n\n/**\n * The key in Firebase config json for the storage bucket.\n */\nexport const CONFIG_STORAGE_BUCKET_KEY = 'storageBucket';\n\n/**\n * 2 minutes\n *\n * The timeout for all operations except upload.\n */\nexport const DEFAULT_MAX_OPERATION_RETRY_TIME = 2 * 60 * 1000;\n\n/**\n * 10 minutes\n *\n * The timeout for upload.\n */\nexport const DEFAULT_MAX_UPLOAD_RETRY_TIME = 10 * 60 * 1000;\n\n/**\n * This is the value of Number.MIN_SAFE_INTEGER, which is not well supported\n * enough for us to use it directly.\n */\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n","import { FirebaseError } from '@firebase/util';\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { CONFIG_STORAGE_BUCKET_KEY } from './constants';\n\n/**\n * An error returned by the Firebase Storage SDK.\n * @public\n */\nexport class FirebaseStorageError extends FirebaseError {\n  /**\n   * Stores custom error data unque to FirebaseStorageError.\n   */\n  customData: { serverResponse: string | null } = { serverResponse: null };\n\n  /**\n   * @param code - A StorageErrorCode string to be prefixed with 'storage/' and\n   *  added to the end of the message.\n   * @param message  - Error message.\n   */\n  constructor(code: StorageErrorCode, message: string) {\n    super(\n      prependCode(code),\n      `Firebase Storage: ${message} (${prependCode(code)})`\n    );\n    // Without this, `instanceof FirebaseStorageError`, in tests for example,\n    // returns false.\n    Object.setPrototypeOf(this, FirebaseStorageError.prototype);\n  }\n\n  /**\n   * Compares a StorageErrorCode against this error's code, filtering out the prefix.\n   */\n  _codeEquals(code: StorageErrorCode): boolean {\n    return prependCode(code) === this.code;\n  }\n\n  /**\n   * Error message including serverResponse if available.\n   */\n  get message(): string {\n    if (this.customData.serverResponse) {\n      return `${this.message}\\n${this.customData.serverResponse}`;\n    } else {\n      return this.message;\n    }\n  }\n\n  /**\n   * Optional response message that was added by the server.\n   */\n  get serverResponse(): null | string {\n    return this.customData.serverResponse;\n  }\n\n  set serverResponse(serverResponse: string | null) {\n    this.customData.serverResponse = serverResponse;\n  }\n}\n\nexport const errors = {};\n\n/**\n * @public\n * Error codes that can be attached to `FirebaseStorageError`s.\n */\nexport const enum StorageErrorCode {\n  // Shared between all platforms\n  UNKNOWN = 'unknown',\n  OBJECT_NOT_FOUND = 'object-not-found',\n  BUCKET_NOT_FOUND = 'bucket-not-found',\n  PROJECT_NOT_FOUND = 'project-not-found',\n  QUOTA_EXCEEDED = 'quota-exceeded',\n  UNAUTHENTICATED = 'unauthenticated',\n  UNAUTHORIZED = 'unauthorized',\n  RETRY_LIMIT_EXCEEDED = 'retry-limit-exceeded',\n  INVALID_CHECKSUM = 'invalid-checksum',\n  CANCELED = 'canceled',\n  // JS specific\n  INVALID_EVENT_NAME = 'invalid-event-name',\n  INVALID_URL = 'invalid-url',\n  INVALID_DEFAULT_BUCKET = 'invalid-default-bucket',\n  NO_DEFAULT_BUCKET = 'no-default-bucket',\n  CANNOT_SLICE_BLOB = 'cannot-slice-blob',\n  SERVER_FILE_WRONG_SIZE = 'server-file-wrong-size',\n  NO_DOWNLOAD_URL = 'no-download-url',\n  INVALID_ARGUMENT = 'invalid-argument',\n  INVALID_ARGUMENT_COUNT = 'invalid-argument-count',\n  APP_DELETED = 'app-deleted',\n  INVALID_ROOT_OPERATION = 'invalid-root-operation',\n  INVALID_FORMAT = 'invalid-format',\n  INTERNAL_ERROR = 'internal-error',\n  UNSUPPORTED_ENVIRONMENT = 'unsupported-environment'\n}\n\nexport function prependCode(code: StorageErrorCode): string {\n  return 'storage/' + code;\n}\n\nexport function unknown(): FirebaseStorageError {\n  const message =\n    'An unknown error occurred, please check the error payload for ' +\n    'server response.';\n  return new FirebaseStorageError(StorageErrorCode.UNKNOWN, message);\n}\n\nexport function objectNotFound(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.OBJECT_NOT_FOUND,\n    \"Object '\" + path + \"' does not exist.\"\n  );\n}\n\nexport function bucketNotFound(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.BUCKET_NOT_FOUND,\n    \"Bucket '\" + bucket + \"' does not exist.\"\n  );\n}\n\nexport function projectNotFound(project: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.PROJECT_NOT_FOUND,\n    \"Project '\" + project + \"' does not exist.\"\n  );\n}\n\nexport function quotaExceeded(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.QUOTA_EXCEEDED,\n    \"Quota for bucket '\" +\n      bucket +\n      \"' exceeded, please view quota on \" +\n      'https://firebase.google.com/pricing/.'\n  );\n}\n\nexport function unauthenticated(): FirebaseStorageError {\n  const message =\n    'User is not authenticated, please authenticate using Firebase ' +\n    'Authentication and try again.';\n  return new FirebaseStorageError(StorageErrorCode.UNAUTHENTICATED, message);\n}\n\nexport function unauthorized(path: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.UNAUTHORIZED,\n    \"User does not have permission to access '\" + path + \"'.\"\n  );\n}\n\nexport function retryLimitExceeded(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.RETRY_LIMIT_EXCEEDED,\n    'Max retry time for operation exceeded, please try again.'\n  );\n}\n\nexport function invalidChecksum(\n  path: string,\n  checksum: string,\n  calculated: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_CHECKSUM,\n    \"Uploaded/downloaded object '\" +\n      path +\n      \"' has checksum '\" +\n      checksum +\n      \"' which does not match '\" +\n      calculated +\n      \"'. Please retry the upload/download.\"\n  );\n}\n\nexport function canceled(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.CANCELED,\n    'User canceled the upload/download.'\n  );\n}\n\nexport function invalidEventName(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_EVENT_NAME,\n    \"Invalid event name '\" + name + \"'.\"\n  );\n}\n\nexport function invalidUrl(url: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_URL,\n    \"Invalid URL '\" + url + \"'.\"\n  );\n}\n\nexport function invalidDefaultBucket(bucket: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_DEFAULT_BUCKET,\n    \"Invalid default bucket '\" + bucket + \"'.\"\n  );\n}\n\nexport function noDefaultBucket(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.NO_DEFAULT_BUCKET,\n    'No default bucket ' +\n      \"found. Did you set the '\" +\n      CONFIG_STORAGE_BUCKET_KEY +\n      \"' property when initializing the app?\"\n  );\n}\n\nexport function cannotSliceBlob(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.CANNOT_SLICE_BLOB,\n    'Cannot slice blob for upload. Please retry the upload.'\n  );\n}\n\nexport function serverFileWrongSize(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.SERVER_FILE_WRONG_SIZE,\n    'Server recorded incorrect upload file size, please retry the upload.'\n  );\n}\n\nexport function noDownloadURL(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.NO_DOWNLOAD_URL,\n    'The given file does not have any download URLs.'\n  );\n}\n\nexport function invalidArgument(message: string): FirebaseStorageError {\n  return new FirebaseStorageError(StorageErrorCode.INVALID_ARGUMENT, message);\n}\n\nexport function invalidArgumentCount(\n  argMin: number,\n  argMax: number,\n  fnName: string,\n  real: number\n): FirebaseStorageError {\n  let countPart;\n  let plural;\n  if (argMin === argMax) {\n    countPart = argMin;\n    plural = argMin === 1 ? 'argument' : 'arguments';\n  } else {\n    countPart = 'between ' + argMin + ' and ' + argMax;\n    plural = 'arguments';\n  }\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_ARGUMENT_COUNT,\n    'Invalid argument count in `' +\n      fnName +\n      '`: Expected ' +\n      countPart +\n      ' ' +\n      plural +\n      ', received ' +\n      real +\n      '.'\n  );\n}\n\nexport function appDeleted(): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.APP_DELETED,\n    'The Firebase app was deleted.'\n  );\n}\n\n/**\n * @param name - The name of the operation that was invalid.\n */\nexport function invalidRootOperation(name: string): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_ROOT_OPERATION,\n    \"The operation '\" +\n      name +\n      \"' cannot be performed on a root reference, create a non-root \" +\n      \"reference using child, such as .child('file.png').\"\n  );\n}\n\n/**\n * @param format - The format that was not valid.\n * @param message - A message describing the format violation.\n */\nexport function invalidFormat(\n  format: string,\n  message: string\n): FirebaseStorageError {\n  return new FirebaseStorageError(\n    StorageErrorCode.INVALID_FORMAT,\n    \"String does not match format '\" + format + \"': \" + message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function unsupportedEnvironment(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n    message\n  );\n}\n\n/**\n * @param message - A message describing the internal error.\n */\nexport function internalError(message: string): FirebaseStorageError {\n  throw new FirebaseStorageError(\n    StorageErrorCode.INTERNAL_ERROR,\n    'Internal error: ' + message\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { unknown, invalidFormat } from './error';\n\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport type StringFormat = string;\n/**\n * An enumeration of the possible string formats for upload.\n * @public\n */\nexport const StringFormat = {\n  /**\n   * Indicates the string should be interpreted \"raw\", that is, as normal text.\n   * The string will be interpreted as UTF-16, then uploaded as a UTF-8 byte\n   * sequence.\n   * Example: The string 'Hello! \\\\ud83d\\\\ude0a' becomes the byte sequence\n   * 48 65 6c 6c 6f 21 20 f0 9f 98 8a\n   */\n  RAW: 'raw',\n  /**\n   * Indicates the string should be interpreted as base64-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO++E6t7/rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64: 'base64',\n  /**\n   * Indicates the string should be interpreted as base64url-encoded data.\n   * Padding characters (trailing '='s) are optional.\n   * Example: The string 'rWmO--E6t7_rlw==' becomes the byte sequence\n   * ad 69 8e fb e1 3a b7 bf eb 97\n   */\n  BASE64URL: 'base64url',\n  /**\n   * Indicates the string is a data URL, such as one obtained from\n   * canvas.toDataURL().\n   * Example: the string 'data:application/octet-stream;base64,aaaa'\n   * becomes the byte sequence\n   * 69 a6 9a\n   * (the content-type \"application/octet-stream\" is also applied, but can\n   * be overridden in the metadata object).\n   */\n  DATA_URL: 'data_url'\n};\n\nexport class StringData {\n  contentType: string | null;\n\n  constructor(public data: Uint8Array, contentType?: string | null) {\n    this.contentType = contentType || null;\n  }\n}\n\nexport function dataFromString(\n  format: StringFormat,\n  stringData: string\n): StringData {\n  switch (format) {\n    case StringFormat.RAW:\n      return new StringData(utf8Bytes_(stringData));\n    case StringFormat.BASE64:\n    case StringFormat.BASE64URL:\n      return new StringData(base64Bytes_(format, stringData));\n    case StringFormat.DATA_URL:\n      return new StringData(\n        dataURLBytes_(stringData),\n        dataURLContentType_(stringData)\n      );\n    default:\n    // do nothing\n  }\n\n  // assert(false);\n  throw unknown();\n}\n\nexport function utf8Bytes_(value: string): Uint8Array {\n  const b: number[] = [];\n  for (let i = 0; i < value.length; i++) {\n    let c = value.charCodeAt(i);\n    if (c <= 127) {\n      b.push(c);\n    } else {\n      if (c <= 2047) {\n        b.push(192 | (c >> 6), 128 | (c & 63));\n      } else {\n        if ((c & 64512) === 55296) {\n          // The start of a surrogate pair.\n          const valid =\n            i < value.length - 1 && (value.charCodeAt(i + 1) & 64512) === 56320;\n          if (!valid) {\n            // The second surrogate wasn't there.\n            b.push(239, 191, 189);\n          } else {\n            const hi = c;\n            const lo = value.charCodeAt(++i);\n            c = 65536 | ((hi & 1023) << 10) | (lo & 1023);\n            b.push(\n              240 | (c >> 18),\n              128 | ((c >> 12) & 63),\n              128 | ((c >> 6) & 63),\n              128 | (c & 63)\n            );\n          }\n        } else {\n          if ((c & 64512) === 56320) {\n            // Invalid low surrogate.\n            b.push(239, 191, 189);\n          } else {\n            b.push(224 | (c >> 12), 128 | ((c >> 6) & 63), 128 | (c & 63));\n          }\n        }\n      }\n    }\n  }\n  return new Uint8Array(b);\n}\n\nexport function percentEncodedBytes_(value: string): Uint8Array {\n  let decoded;\n  try {\n    decoded = decodeURIComponent(value);\n  } catch (e) {\n    throw invalidFormat(StringFormat.DATA_URL, 'Malformed data URL.');\n  }\n  return utf8Bytes_(decoded);\n}\n\nexport function base64Bytes_(format: StringFormat, value: string): Uint8Array {\n  switch (format) {\n    case StringFormat.BASE64: {\n      const hasMinus = value.indexOf('-') !== -1;\n      const hasUnder = value.indexOf('_') !== -1;\n      if (hasMinus || hasUnder) {\n        const invalidChar = hasMinus ? '-' : '_';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" +\n            invalidChar +\n            \"' found: is it base64url encoded?\"\n        );\n      }\n      break;\n    }\n    case StringFormat.BASE64URL: {\n      const hasPlus = value.indexOf('+') !== -1;\n      const hasSlash = value.indexOf('/') !== -1;\n      if (hasPlus || hasSlash) {\n        const invalidChar = hasPlus ? '+' : '/';\n        throw invalidFormat(\n          format,\n          \"Invalid character '\" + invalidChar + \"' found: is it base64 encoded?\"\n        );\n      }\n      value = value.replace(/-/g, '+').replace(/_/g, '/');\n      break;\n    }\n    default:\n    // do nothing\n  }\n  let bytes;\n  try {\n    bytes = atob(value);\n  } catch (e) {\n    throw invalidFormat(format, 'Invalid character found');\n  }\n  const array = new Uint8Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    array[i] = bytes.charCodeAt(i);\n  }\n  return array;\n}\n\nclass DataURLParts {\n  base64: boolean = false;\n  contentType: string | null = null;\n  rest: string;\n\n  constructor(dataURL: string) {\n    const matches = dataURL.match(/^data:([^,]+)?,/);\n    if (matches === null) {\n      throw invalidFormat(\n        StringFormat.DATA_URL,\n        \"Must be formatted 'data:[<mediatype>][;base64],<data>\"\n      );\n    }\n    const middle = matches[1] || null;\n    if (middle != null) {\n      this.base64 = endsWith(middle, ';base64');\n      this.contentType = this.base64\n        ? middle.substring(0, middle.length - ';base64'.length)\n        : middle;\n    }\n    this.rest = dataURL.substring(dataURL.indexOf(',') + 1);\n  }\n}\n\nexport function dataURLBytes_(dataUrl: string): Uint8Array {\n  const parts = new DataURLParts(dataUrl);\n  if (parts.base64) {\n    return base64Bytes_(StringFormat.BASE64, parts.rest);\n  } else {\n    return percentEncodedBytes_(parts.rest);\n  }\n}\n\nexport function dataURLContentType_(dataUrl: string): string | null {\n  const parts = new DataURLParts(dataUrl);\n  return parts.contentType;\n}\n\nfunction endsWith(s: string, end: string): boolean {\n  const longEnough = s.length >= end.length;\n  if (!longEnough) {\n    return false;\n  }\n\n  return s.substring(s.length - end.length) === end;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Enumerations used for upload tasks.\n */\n\n/**\n * An event that is triggered on a task.\n */\nexport type TaskEvent = string;\n\n/**\n * An event that is triggered on a task.\n */\nexport const TaskEvent = {\n  /**\n   * For this event,\n   * <ul>\n   *   <li>The `next` function is triggered on progress updates and when the\n   *       task is paused/resumed with an `UploadTaskSnapshot` as the first\n   *       argument.</li>\n   *   <li>The `error` function is triggered if the upload is canceled or fails\n   *       for another reason.</li>\n   *   <li>The `complete` function is triggered if the upload completes\n   *       successfully.</li>\n   * </ul>\n   */\n  STATE_CHANGED: 'state_changed'\n};\n\n/**\n * Internal enum for task state.\n */\nexport const enum InternalTaskState {\n  RUNNING = 'running',\n  PAUSING = 'pausing',\n  PAUSED = 'paused',\n  SUCCESS = 'success',\n  CANCELING = 'canceling',\n  CANCELED = 'canceled',\n  ERROR = 'error'\n}\n\n/**\n * Represents the current state of a running upload.\n */\nexport type TaskState = string;\n\n/**\n * Represents the current state of a running upload.\n */\nexport const TaskState = {\n  /** The task is currently transferring data. */\n  RUNNING: 'running',\n\n  /** The task was paused by the user. */\n  PAUSED: 'paused',\n\n  /** The task completed successfully. */\n  SUCCESS: 'success',\n\n  /** The task was canceled. */\n  CANCELED: 'canceled',\n\n  /** The task failed with an error. */\n  ERROR: 'error'\n};\n\nexport function taskStateFromInternalTaskState(\n  state: InternalTaskState\n): TaskState {\n  switch (state) {\n    case InternalTaskState.RUNNING:\n    case InternalTaskState.PAUSING:\n    case InternalTaskState.CANCELING:\n      return TaskState.RUNNING;\n    case InternalTaskState.PAUSED:\n      return TaskState.PAUSED;\n    case InternalTaskState.SUCCESS:\n      return TaskState.SUCCESS;\n    case InternalTaskState.CANCELED:\n      return TaskState.CANCELED;\n    case InternalTaskState.ERROR:\n      return TaskState.ERROR;\n    default:\n      // TODO(andysoto): assert(false);\n      return TaskState.ERROR;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * XHR headers\n */\nexport interface Headers {\n  [name: string]: string | number;\n}\n\n/**\n * A lightweight wrapper around XMLHttpRequest with a\n * goog.net.XhrIo-like interface.\n */\nexport interface XhrIo {\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string | null,\n    headers?: Headers\n  ): Promise<XhrIo>;\n\n  getErrorCode(): ErrorCode;\n\n  getStatus(): number;\n\n  getResponseText(): string;\n\n  /**\n   * Abort the request.\n   */\n  abort(): void;\n\n  getResponseHeader(header: string): string | null;\n\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void;\n}\n\n/**\n * Error codes for requests made by the the XhrIo wrapper.\n */\nexport enum ErrorCode {\n  NO_ERROR = 0,\n  NETWORK_ERROR = 1,\n  ABORT = 2\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Headers, XhrIo, ErrorCode } from './xhrio';\nimport { internalError } from './error';\n\n/**\n * We use this instead of goog.net.XhrIo because goog.net.XhrIo is hyuuuuge and\n * doesn't work in React Native on Android.\n */\nexport class NetworkXhrIo implements XhrIo {\n  private xhr_: XMLHttpRequest;\n  private errorCode_: ErrorCode;\n  private sendPromise_: Promise<XhrIo>;\n  private sent_: boolean = false;\n\n  constructor() {\n    this.xhr_ = new XMLHttpRequest();\n    this.errorCode_ = ErrorCode.NO_ERROR;\n    this.sendPromise_ = new Promise(resolve => {\n      this.xhr_.addEventListener('abort', () => {\n        this.errorCode_ = ErrorCode.ABORT;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('error', () => {\n        this.errorCode_ = ErrorCode.NETWORK_ERROR;\n        resolve(this);\n      });\n      this.xhr_.addEventListener('load', () => {\n        resolve(this);\n      });\n    });\n  }\n\n  /**\n   * @override\n   */\n  send(\n    url: string,\n    method: string,\n    body?: ArrayBufferView | Blob | string,\n    headers?: Headers\n  ): Promise<XhrIo> {\n    if (this.sent_) {\n      throw internalError('cannot .send() more than once');\n    }\n    this.sent_ = true;\n    this.xhr_.open(method, url, true);\n    if (headers !== undefined) {\n      for (const key in headers) {\n        if (headers.hasOwnProperty(key)) {\n          this.xhr_.setRequestHeader(key, headers[key].toString());\n        }\n      }\n    }\n    if (body !== undefined) {\n      this.xhr_.send(body);\n    } else {\n      this.xhr_.send();\n    }\n    return this.sendPromise_;\n  }\n\n  /**\n   * @override\n   */\n  getErrorCode(): ErrorCode {\n    if (!this.sent_) {\n      throw internalError('cannot .getErrorCode() before sending');\n    }\n    return this.errorCode_;\n  }\n\n  /**\n   * @override\n   */\n  getStatus(): number {\n    if (!this.sent_) {\n      throw internalError('cannot .getStatus() before sending');\n    }\n    try {\n      return this.xhr_.status;\n    } catch (e) {\n      return -1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  getResponseText(): string {\n    if (!this.sent_) {\n      throw internalError('cannot .getResponseText() before sending');\n    }\n    return this.xhr_.responseText;\n  }\n\n  /**\n   * Aborts the request.\n   * @override\n   */\n  abort(): void {\n    this.xhr_.abort();\n  }\n\n  /**\n   * @override\n   */\n  getResponseHeader(header: string): string | null {\n    return this.xhr_.getResponseHeader(header);\n  }\n\n  /**\n   * @override\n   */\n  addUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.addEventListener('progress', listener);\n    }\n  }\n\n  /**\n   * @override\n   */\n  removeUploadProgressListener(listener: (p1: ProgressEvent) => void): void {\n    if (this.xhr_.upload != null) {\n      this.xhr_.upload.removeEventListener('progress', listener);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Replacement for goog.net.XhrIoPool that works with fbs.XhrIo.\n */\nimport { XhrIo } from './xhrio';\nimport { NetworkXhrIo } from './xhrio_network';\n\n/**\n * Factory-like class for creating XhrIo instances.\n */\nexport class XhrIoPool {\n  createXhrIo(): XhrIo {\n    return new NetworkXhrIo();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functionality related to the parsing/composition of bucket/\n * object location.\n */\n\nimport { invalidDefaultBucket, invalidUrl } from './error';\nimport { DEFAULT_HOST } from './constants';\n\n/**\n * Firebase Storage location data.\n *\n * @internal\n */\nexport class Location {\n  private path_: string;\n\n  constructor(public readonly bucket: string, path: string) {\n    this.path_ = path;\n  }\n\n  get path(): string {\n    return this.path_;\n  }\n\n  get isRoot(): boolean {\n    return this.path.length === 0;\n  }\n\n  fullServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o/' + encode(this.path);\n  }\n\n  bucketOnlyServerUrl(): string {\n    const encode = encodeURIComponent;\n    return '/b/' + encode(this.bucket) + '/o';\n  }\n\n  static makeFromBucketSpec(bucketString: string): Location {\n    let bucketLocation;\n    try {\n      bucketLocation = Location.makeFromUrl(bucketString);\n    } catch (e) {\n      // Not valid URL, use as-is. This lets you put bare bucket names in\n      // config.\n      return new Location(bucketString, '');\n    }\n    if (bucketLocation.path === '') {\n      return bucketLocation;\n    } else {\n      throw invalidDefaultBucket(bucketString);\n    }\n  }\n\n  static makeFromUrl(url: string): Location {\n    let location: Location | null = null;\n    const bucketDomain = '([A-Za-z0-9.\\\\-_]+)';\n\n    function gsModify(loc: Location): void {\n      if (loc.path.charAt(loc.path.length - 1) === '/') {\n        loc.path_ = loc.path_.slice(0, -1);\n      }\n    }\n    const gsPath = '(/(.*))?$';\n    const gsRegex = new RegExp('^gs://' + bucketDomain + gsPath, 'i');\n    const gsIndices = { bucket: 1, path: 3 };\n\n    function httpModify(loc: Location): void {\n      loc.path_ = decodeURIComponent(loc.path);\n    }\n    const version = 'v[A-Za-z0-9_]+';\n    const firebaseStorageHost = DEFAULT_HOST.replace(/[.]/g, '\\\\.');\n    const firebaseStoragePath = '(/([^?#]*).*)?$';\n    const firebaseStorageRegExp = new RegExp(\n      `^https?://${firebaseStorageHost}/${version}/b/${bucketDomain}/o${firebaseStoragePath}`,\n      'i'\n    );\n    const firebaseStorageIndices = { bucket: 1, path: 3 };\n\n    const cloudStorageHost =\n      '(?:storage.googleapis.com|storage.cloud.google.com)';\n    const cloudStoragePath = '([^?#]*)';\n    const cloudStorageRegExp = new RegExp(\n      `^https?://${cloudStorageHost}/${bucketDomain}/${cloudStoragePath}`,\n      'i'\n    );\n    const cloudStorageIndices = { bucket: 1, path: 2 };\n\n    const groups = [\n      { regex: gsRegex, indices: gsIndices, postModify: gsModify },\n      {\n        regex: firebaseStorageRegExp,\n        indices: firebaseStorageIndices,\n        postModify: httpModify\n      },\n      {\n        regex: cloudStorageRegExp,\n        indices: cloudStorageIndices,\n        postModify: httpModify\n      }\n    ];\n    for (let i = 0; i < groups.length; i++) {\n      const group = groups[i];\n      const captures = group.regex.exec(url);\n      if (captures) {\n        const bucketValue = captures[group.indices.bucket];\n        let pathValue = captures[group.indices.path];\n        if (!pathValue) {\n          pathValue = '';\n        }\n        location = new Location(bucketValue, pathValue);\n        group.postModify(location);\n        break;\n      }\n    }\n    if (location == null) {\n      throw invalidUrl(url);\n    }\n    return location;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Request } from './request';\n\n/**\n * A request whose promise always fails.\n */\nexport class FailRequest<T> implements Request<T> {\n  promise_: Promise<T>;\n\n  constructor(error: FirebaseStorageError) {\n    this.promise_ = Promise.reject<T>(error);\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(_appDelete = false): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { invalidArgument } from './error';\n\nexport function isJustDef<T>(p: T | null | undefined): p is T | null {\n  return p !== void 0;\n}\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function isFunction(p: unknown): p is Function {\n  return typeof p === 'function';\n}\n\nexport function isNonArrayObject(p: unknown): boolean {\n  return typeof p === 'object' && !Array.isArray(p);\n}\n\nexport function isString(p: unknown): p is string {\n  return typeof p === 'string' || p instanceof String;\n}\n\nexport function isNativeBlob(p: unknown): p is Blob {\n  return isNativeBlobDefined() && p instanceof Blob;\n}\n\nexport function isNativeBlobDefined(): boolean {\n  return typeof Blob !== 'undefined';\n}\n\nexport function validateNumber(\n  argument: string,\n  minValue: number,\n  maxValue: number,\n  value: number\n): void {\n  if (value < minValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${minValue} or greater.`\n    );\n  }\n  if (value > maxValue) {\n    throw invalidArgument(\n      `Invalid value for '${argument}'. Expected ${maxValue} or less.`\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Functions to create and manipulate URLs for the server API.\n */\nimport { DEFAULT_HOST } from './constants';\nimport { UrlParams } from './requestinfo';\n\nexport function makeUrl(urlPart: string): string {\n  return `https://${DEFAULT_HOST}/v0${urlPart}`;\n}\n\nexport function makeQueryString(params: UrlParams): string {\n  const encode = encodeURIComponent;\n  let queryPart = '?';\n  for (const key in params) {\n    if (params.hasOwnProperty(key)) {\n      const nextPart = encode(key) + '=' + encode(params[key]);\n      queryPart = queryPart + nextPart + '&';\n    }\n  }\n\n  // Chop off the extra '&' or '?' on the end\n  queryPart = queryPart.slice(0, -1);\n  return queryPart;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods used to actually send HTTP requests from\n * abstract representations.\n */\n\nimport { start, stop, id as backoffId } from './backoff';\nimport {\n  FirebaseStorageError,\n  unknown,\n  appDeleted,\n  canceled,\n  retryLimitExceeded\n} from './error';\nimport { RequestInfo } from './requestinfo';\nimport { isJustDef } from './type';\nimport { makeQueryString } from './url';\nimport { Headers, XhrIo, ErrorCode } from './xhrio';\nimport { XhrIoPool } from './xhriopool';\n\nexport interface Request<T> {\n  getPromise(): Promise<T>;\n\n  /**\n   * Cancels the request. IMPORTANT: the promise may still be resolved with an\n   * appropriate value (if the request is finished before you call this method,\n   * but the promise has not yet been resolved), so don't just assume it will be\n   * rejected if you call this function.\n   * @param appDelete - True if the cancelation came from the app being deleted.\n   */\n  cancel(appDelete?: boolean): void;\n}\n\nclass NetworkRequest<T> implements Request<T> {\n  private url_: string;\n  private method_: string;\n  private headers_: Headers;\n  private body_: string | Blob | Uint8Array | null;\n  private successCodes_: number[];\n  private additionalRetryCodes_: number[];\n  private pendingXhr_: XhrIo | null = null;\n  private backoffId_: backoffId | null = null;\n  private resolve_!: (value?: T | PromiseLike<T>) => void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  private reject_!: (reason?: any) => void;\n  private canceled_: boolean = false;\n  private appDelete_: boolean = false;\n  private callback_: (p1: XhrIo, p2: string) => T;\n  private errorCallback_:\n    | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null;\n  private progressCallback_: ((p1: number, p2: number) => void) | null;\n  private timeout_: number;\n  private pool_: XhrIoPool;\n  promise_: Promise<T>;\n\n  constructor(\n    url: string,\n    method: string,\n    headers: Headers,\n    body: string | Blob | Uint8Array | null,\n    successCodes: number[],\n    additionalRetryCodes: number[],\n    callback: (p1: XhrIo, p2: string) => T,\n    errorCallback:\n      | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n      | null,\n    timeout: number,\n    progressCallback: ((p1: number, p2: number) => void) | null,\n    pool: XhrIoPool\n  ) {\n    this.url_ = url;\n    this.method_ = method;\n    this.headers_ = headers;\n    this.body_ = body;\n    this.successCodes_ = successCodes.slice();\n    this.additionalRetryCodes_ = additionalRetryCodes.slice();\n    this.callback_ = callback;\n    this.errorCallback_ = errorCallback;\n    this.progressCallback_ = progressCallback;\n    this.timeout_ = timeout;\n    this.pool_ = pool;\n    this.promise_ = new Promise((resolve, reject) => {\n      this.resolve_ = resolve as (value?: T | PromiseLike<T>) => void;\n      this.reject_ = reject;\n      this.start_();\n    });\n  }\n\n  /**\n   * Actually starts the retry loop.\n   */\n  private start_(): void {\n    const self = this;\n\n    function doTheRequest(\n      backoffCallback: (p1: boolean, ...p2: unknown[]) => void,\n      canceled: boolean\n    ): void {\n      if (canceled) {\n        backoffCallback(false, new RequestEndStatus(false, null, true));\n        return;\n      }\n      const xhr = self.pool_.createXhrIo();\n      self.pendingXhr_ = xhr;\n\n      function progressListener(progressEvent: ProgressEvent): void {\n        const loaded = progressEvent.loaded;\n        const total = progressEvent.lengthComputable ? progressEvent.total : -1;\n        if (self.progressCallback_ !== null) {\n          self.progressCallback_(loaded, total);\n        }\n      }\n      if (self.progressCallback_ !== null) {\n        xhr.addUploadProgressListener(progressListener);\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      xhr\n        .send(self.url_, self.method_, self.body_, self.headers_)\n        .then((xhr: XhrIo) => {\n          if (self.progressCallback_ !== null) {\n            xhr.removeUploadProgressListener(progressListener);\n          }\n          self.pendingXhr_ = null;\n          xhr = xhr as XhrIo;\n          const hitServer = xhr.getErrorCode() === ErrorCode.NO_ERROR;\n          const status = xhr.getStatus();\n          if (!hitServer || self.isRetryStatusCode_(status)) {\n            const wasCanceled = xhr.getErrorCode() === ErrorCode.ABORT;\n            backoffCallback(\n              false,\n              new RequestEndStatus(false, null, wasCanceled)\n            );\n            return;\n          }\n          const successCode = self.successCodes_.indexOf(status) !== -1;\n          backoffCallback(true, new RequestEndStatus(successCode, xhr));\n        });\n    }\n\n    /**\n     * @param requestWentThrough - True if the request eventually went\n     *     through, false if it hit the retry limit or was canceled.\n     */\n    function backoffDone(\n      requestWentThrough: boolean,\n      status: RequestEndStatus\n    ): void {\n      const resolve = self.resolve_;\n      const reject = self.reject_;\n      const xhr = status.xhr as XhrIo;\n      if (status.wasSuccessCode) {\n        try {\n          const result = self.callback_(xhr, xhr.getResponseText());\n          if (isJustDef(result)) {\n            resolve(result);\n          } else {\n            resolve();\n          }\n        } catch (e) {\n          reject(e);\n        }\n      } else {\n        if (xhr !== null) {\n          const err = unknown();\n          err.serverResponse = xhr.getResponseText();\n          if (self.errorCallback_) {\n            reject(self.errorCallback_(xhr, err));\n          } else {\n            reject(err);\n          }\n        } else {\n          if (status.canceled) {\n            const err = self.appDelete_ ? appDeleted() : canceled();\n            reject(err);\n          } else {\n            const err = retryLimitExceeded();\n            reject(err);\n          }\n        }\n      }\n    }\n    if (this.canceled_) {\n      backoffDone(false, new RequestEndStatus(false, null, true));\n    } else {\n      this.backoffId_ = start(doTheRequest, backoffDone, this.timeout_);\n    }\n  }\n\n  /** @inheritDoc */\n  getPromise(): Promise<T> {\n    return this.promise_;\n  }\n\n  /** @inheritDoc */\n  cancel(appDelete?: boolean): void {\n    this.canceled_ = true;\n    this.appDelete_ = appDelete || false;\n    if (this.backoffId_ !== null) {\n      stop(this.backoffId_);\n    }\n    if (this.pendingXhr_ !== null) {\n      this.pendingXhr_.abort();\n    }\n  }\n\n  private isRetryStatusCode_(status: number): boolean {\n    // The codes for which to retry came from this page:\n    // https://cloud.google.com/storage/docs/exponential-backoff\n    const isFiveHundredCode = status >= 500 && status < 600;\n    const extraRetryCodes = [\n      // Request Timeout: web server didn't receive full request in time.\n      408,\n      // Too Many Requests: you're getting rate-limited, basically.\n      429\n    ];\n    const isExtraRetryCode = extraRetryCodes.indexOf(status) !== -1;\n    const isRequestSpecificRetryCode =\n      this.additionalRetryCodes_.indexOf(status) !== -1;\n    return isFiveHundredCode || isExtraRetryCode || isRequestSpecificRetryCode;\n  }\n}\n\n/**\n * A collection of information about the result of a network request.\n * @param opt_canceled - Defaults to false.\n */\nexport class RequestEndStatus {\n  /**\n   * True if the request was canceled.\n   */\n  canceled: boolean;\n\n  constructor(\n    public wasSuccessCode: boolean,\n    public xhr: XhrIo | null,\n    canceled?: boolean\n  ) {\n    this.canceled = !!canceled;\n  }\n}\n\nexport function addAuthHeader_(\n  headers: Headers,\n  authToken: string | null\n): void {\n  if (authToken !== null && authToken.length > 0) {\n    headers['Authorization'] = 'Firebase ' + authToken;\n  }\n}\n\nexport function addVersionHeader_(\n  headers: Headers,\n  firebaseVersion?: string\n): void {\n  headers['X-Firebase-Storage-Version'] =\n    'webjs/' + (firebaseVersion ?? 'AppManager');\n}\n\nexport function addGmpidHeader_(headers: Headers, appId: string | null): void {\n  if (appId) {\n    headers['X-Firebase-GMPID'] = appId;\n  }\n}\n\nexport function makeRequest<T>(\n  requestInfo: RequestInfo<T>,\n  appId: string | null,\n  authToken: string | null,\n  pool: XhrIoPool,\n  firebaseVersion?: string\n): Request<T> {\n  const queryPart = makeQueryString(requestInfo.urlParams);\n  const url = requestInfo.url + queryPart;\n  const headers = Object.assign({}, requestInfo.headers);\n  addGmpidHeader_(headers, appId);\n  addAuthHeader_(headers, authToken);\n  addVersionHeader_(headers, firebaseVersion);\n  return new NetworkRequest<T>(\n    url,\n    requestInfo.method,\n    headers,\n    requestInfo.body,\n    requestInfo.successCodes,\n    requestInfo.additionalRetryCodes,\n    requestInfo.handler,\n    requestInfo.errorHandler,\n    requestInfo.timeout,\n    requestInfo.progressCallback,\n    pool\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a method for running a function with exponential\n * backoff.\n */\ntype id = (p1: boolean) => void;\n\nexport { id };\n\n/**\n * @param f May be invoked\n *     before the function returns.\n * @param callback Get all the arguments passed to the function\n *     passed to f, including the initial boolean.\n */\nexport function start(\n  f: (p1: (success: boolean) => void, canceled: boolean) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback: (...args: any[]) => unknown,\n  timeout: number\n): id {\n  // TODO(andysoto): make this code cleaner (probably refactor into an actual\n  // type instead of a bunch of functions with state shared in the closure)\n  let waitSeconds = 1;\n  // Would type this as \"number\" but that doesn't work for Node so ¯\\_(ツ)_/¯\n  // TODO: find a way to exclude Node type definition for storage because storage only works in browser\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let timeoutId: any = null;\n  let hitTimeout = false;\n  let cancelState = 0;\n\n  function canceled(): boolean {\n    return cancelState === 2;\n  }\n  let triggeredCallback = false;\n\n  function triggerCallback(...args: any[]): void {\n    if (!triggeredCallback) {\n      triggeredCallback = true;\n      callback.apply(null, args);\n    }\n  }\n\n  function callWithDelay(millis: number): void {\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n      f(handler, canceled());\n    }, millis);\n  }\n\n  function handler(success: boolean, ...args: any[]): void {\n    if (triggeredCallback) {\n      return;\n    }\n    if (success) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    const mustStop = canceled() || hitTimeout;\n    if (mustStop) {\n      triggerCallback.call(null, success, ...args);\n      return;\n    }\n    if (waitSeconds < 64) {\n      /* TODO(andysoto): don't back off so quickly if we know we're offline. */\n      waitSeconds *= 2;\n    }\n    let waitMillis;\n    if (cancelState === 1) {\n      cancelState = 2;\n      waitMillis = 0;\n    } else {\n      waitMillis = (waitSeconds + Math.random()) * 1000;\n    }\n    callWithDelay(waitMillis);\n  }\n  let stopped = false;\n\n  function stop(wasTimeout: boolean): void {\n    if (stopped) {\n      return;\n    }\n    stopped = true;\n    if (triggeredCallback) {\n      return;\n    }\n    if (timeoutId !== null) {\n      if (!wasTimeout) {\n        cancelState = 2;\n      }\n      clearTimeout(timeoutId);\n      callWithDelay(0);\n    } else {\n      if (!wasTimeout) {\n        cancelState = 1;\n      }\n    }\n  }\n  callWithDelay(0);\n  setTimeout(() => {\n    hitTimeout = true;\n    stop(true);\n  }, timeout);\n  return stop;\n}\n\n/**\n * Stops the retry loop from repeating.\n * If the function is currently \"in between\" retries, it is invoked immediately\n * with the second parameter as \"true\". Otherwise, it will be invoked once more\n * after the current invocation finishes iff the current invocation would have\n * triggered another retry.\n */\nexport function stop(id: id): void {\n  id(false);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Some methods copied from goog.fs.\n * We don't include goog.fs because it pulls in a bunch of Deferred code that\n * bloats the size of the released binary.\n */\nimport { isNativeBlobDefined } from './type';\nimport { StorageErrorCode, FirebaseStorageError } from './error';\n\nfunction getBlobBuilder(): typeof IBlobBuilder | undefined {\n  if (typeof BlobBuilder !== 'undefined') {\n    return BlobBuilder;\n  } else if (typeof WebKitBlobBuilder !== 'undefined') {\n    return WebKitBlobBuilder;\n  } else {\n    return undefined;\n  }\n}\n\n/**\n * Concatenates one or more values together and converts them to a Blob.\n *\n * @param args The values that will make up the resulting blob.\n * @return The blob.\n */\nexport function getBlob(...args: Array<string | Blob | ArrayBuffer>): Blob {\n  const BlobBuilder = getBlobBuilder();\n  if (BlobBuilder !== undefined) {\n    const bb = new BlobBuilder();\n    for (let i = 0; i < args.length; i++) {\n      bb.append(args[i]);\n    }\n    return bb.getBlob();\n  } else {\n    if (isNativeBlobDefined()) {\n      return new Blob(args);\n    } else {\n      throw new FirebaseStorageError(\n        StorageErrorCode.UNSUPPORTED_ENVIRONMENT,\n        \"This browser doesn't seem to support creating Blobs\"\n      );\n    }\n  }\n}\n\n/**\n * Slices the blob. The returned blob contains data from the start byte\n * (inclusive) till the end byte (exclusive). Negative indices cannot be used.\n *\n * @param blob The blob to be sliced.\n * @param start Index of the starting byte.\n * @param end Index of the ending byte.\n * @return The blob slice or null if not supported.\n */\nexport function sliceBlob(blob: Blob, start: number, end: number): Blob | null {\n  if (blob.webkitSlice) {\n    return blob.webkitSlice(start, end);\n  } else if (blob.mozSlice) {\n    return blob.mozSlice(start, end);\n  } else if (blob.slice) {\n    return blob.slice(start, end);\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @file Provides a Blob-like wrapper for various binary types (including the\n * native Blob type). This makes it possible to upload types like ArrayBuffers,\n * making uploads possible in environments without the native Blob type.\n */\nimport { sliceBlob, getBlob } from './fs';\nimport { StringFormat, dataFromString } from './string';\nimport { isNativeBlob, isNativeBlobDefined, isString } from './type';\n\n/**\n * @param opt_elideCopy - If true, doesn't copy mutable input data\n *     (e.g. Uint8Arrays). Pass true only if you know the objects will not be\n *     modified after this blob's construction.\n *\n * @internal\n */\nexport class FbsBlob {\n  private data_!: Blob | Uint8Array;\n  private size_: number;\n  private type_: string;\n\n  constructor(data: Blob | Uint8Array | ArrayBuffer, elideCopy?: boolean) {\n    let size: number = 0;\n    let blobType: string = '';\n    if (isNativeBlob(data)) {\n      this.data_ = data as Blob;\n      size = (data as Blob).size;\n      blobType = (data as Blob).type;\n    } else if (data instanceof ArrayBuffer) {\n      if (elideCopy) {\n        this.data_ = new Uint8Array(data);\n      } else {\n        this.data_ = new Uint8Array(data.byteLength);\n        this.data_.set(new Uint8Array(data));\n      }\n      size = this.data_.length;\n    } else if (data instanceof Uint8Array) {\n      if (elideCopy) {\n        this.data_ = data as Uint8Array;\n      } else {\n        this.data_ = new Uint8Array(data.length);\n        this.data_.set(data as Uint8Array);\n      }\n      size = data.length;\n    }\n    this.size_ = size;\n    this.type_ = blobType;\n  }\n\n  size(): number {\n    return this.size_;\n  }\n\n  type(): string {\n    return this.type_;\n  }\n\n  slice(startByte: number, endByte: number): FbsBlob | null {\n    if (isNativeBlob(this.data_)) {\n      const realBlob = this.data_ as Blob;\n      const sliced = sliceBlob(realBlob, startByte, endByte);\n      if (sliced === null) {\n        return null;\n      }\n      return new FbsBlob(sliced);\n    } else {\n      const slice = new Uint8Array(\n        (this.data_ as Uint8Array).buffer,\n        startByte,\n        endByte - startByte\n      );\n      return new FbsBlob(slice, true);\n    }\n  }\n\n  static getBlob(...args: Array<string | FbsBlob>): FbsBlob | null {\n    if (isNativeBlobDefined()) {\n      const blobby: Array<Blob | Uint8Array | string> = args.map(\n        (val: string | FbsBlob): Blob | Uint8Array | string => {\n          if (val instanceof FbsBlob) {\n            return val.data_;\n          } else {\n            return val;\n          }\n        }\n      );\n      return new FbsBlob(getBlob.apply(null, blobby));\n    } else {\n      const uint8Arrays: Uint8Array[] = args.map(\n        (val: string | FbsBlob): Uint8Array => {\n          if (isString(val)) {\n            return dataFromString(StringFormat.RAW, val as string).data;\n          } else {\n            // Blobs don't exist, so this has to be a Uint8Array.\n            return (val as FbsBlob).data_ as Uint8Array;\n          }\n        }\n      );\n      let finalLength = 0;\n      uint8Arrays.forEach((array: Uint8Array): void => {\n        finalLength += array.byteLength;\n      });\n      const merged = new Uint8Array(finalLength);\n      let index = 0;\n      uint8Arrays.forEach((array: Uint8Array) => {\n        for (let i = 0; i < array.length; i++) {\n          merged[index++] = array[i];\n        }\n      });\n      return new FbsBlob(merged, true);\n    }\n  }\n\n  uploadData(): Blob | Uint8Array {\n    return this.data_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isNonArrayObject } from './type';\n\n/**\n * Returns the Object resulting from parsing the given JSON, or null if the\n * given string does not represent a JSON object.\n */\nexport function jsonObjectOrNull(\n  s: string\n): { [name: string]: unknown } | null {\n  let obj;\n  try {\n    obj = JSON.parse(s);\n  } catch (e) {\n    return null;\n  }\n  if (isNonArrayObject(obj)) {\n    return obj;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Contains helper methods for manipulating paths.\n */\n\n/**\n * @return Null if the path is already at the root.\n */\nexport function parent(path: string): string | null {\n  if (path.length === 0) {\n    return null;\n  }\n  const index = path.lastIndexOf('/');\n  if (index === -1) {\n    return '';\n  }\n  const newPath = path.slice(0, index);\n  return newPath;\n}\n\nexport function child(path: string, childPath: string): string {\n  const canonicalChildPath = childPath\n    .split('/')\n    .filter(component => component.length > 0)\n    .join('/');\n  if (path.length === 0) {\n    return canonicalChildPath;\n  } else {\n    return path + '/' + canonicalChildPath;\n  }\n}\n\n/**\n * Returns the last component of a path.\n * '/foo/bar' -> 'bar'\n * '/foo/bar/baz/' -> 'baz/'\n * '/a' -> 'a'\n */\nexport function lastComponent(path: string): string {\n  const index = path.lastIndexOf('/', path.length - 2);\n  if (index === -1) {\n    return path;\n  } else {\n    return path.slice(index + 1);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the metadata format\n */\nimport { Metadata } from '../metadata';\n\nimport { jsonObjectOrNull } from './json';\nimport { Location } from './location';\nimport { lastComponent } from './path';\nimport { isString } from './type';\nimport { makeUrl, makeQueryString } from './url';\nimport { Reference } from '../reference';\nimport { StorageService } from '../service';\n\nexport function noXform_<T>(metadata: Metadata, value: T): T {\n  return value;\n}\n\nclass Mapping<T> {\n  local: string;\n  writable: boolean;\n  xform: (p1: Metadata, p2?: T) => T | undefined;\n\n  constructor(\n    public server: string,\n    local?: string | null,\n    writable?: boolean,\n    xform?: ((p1: Metadata, p2?: T) => T | undefined) | null\n  ) {\n    this.local = local || server;\n    this.writable = !!writable;\n    this.xform = xform || noXform_;\n  }\n}\ntype Mappings = Array<Mapping<string> | Mapping<number>>;\n\nexport { Mappings };\n\nlet mappings_: Mappings | null = null;\n\nexport function xformPath(fullPath: string | undefined): string | undefined {\n  if (!isString(fullPath) || fullPath.length < 2) {\n    return fullPath;\n  } else {\n    return lastComponent(fullPath);\n  }\n}\n\nexport function getMappings(): Mappings {\n  if (mappings_) {\n    return mappings_;\n  }\n  const mappings: Mappings = [];\n  mappings.push(new Mapping<string>('bucket'));\n  mappings.push(new Mapping<string>('generation'));\n  mappings.push(new Mapping<string>('metageneration'));\n  mappings.push(new Mapping<string>('name', 'fullPath', true));\n\n  function mappingsXformPath(\n    _metadata: Metadata,\n    fullPath: string | undefined\n  ): string | undefined {\n    return xformPath(fullPath);\n  }\n  const nameMapping = new Mapping<string>('name');\n  nameMapping.xform = mappingsXformPath;\n  mappings.push(nameMapping);\n\n  /**\n   * Coerces the second param to a number, if it is defined.\n   */\n  function xformSize(\n    _metadata: Metadata,\n    size?: number | string\n  ): number | undefined {\n    if (size !== undefined) {\n      return Number(size);\n    } else {\n      return size;\n    }\n  }\n  const sizeMapping = new Mapping<number>('size');\n  sizeMapping.xform = xformSize;\n  mappings.push(sizeMapping);\n  mappings.push(new Mapping<number>('timeCreated'));\n  mappings.push(new Mapping<string>('updated'));\n  mappings.push(new Mapping<string>('md5Hash', null, true));\n  mappings.push(new Mapping<string>('cacheControl', null, true));\n  mappings.push(new Mapping<string>('contentDisposition', null, true));\n  mappings.push(new Mapping<string>('contentEncoding', null, true));\n  mappings.push(new Mapping<string>('contentLanguage', null, true));\n  mappings.push(new Mapping<string>('contentType', null, true));\n  mappings.push(new Mapping<string>('metadata', 'customMetadata', true));\n  mappings_ = mappings;\n  return mappings_;\n}\n\nexport function addRef(metadata: Metadata, service: StorageService): void {\n  function generateRef(): Reference {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const loc = new Location(bucket, path);\n    return service._makeStorageReference(loc);\n  }\n  Object.defineProperty(metadata, 'ref', { get: generateRef });\n}\n\nexport function fromResource(\n  service: StorageService,\n  resource: { [name: string]: unknown },\n  mappings: Mappings\n): Metadata {\n  const metadata: Metadata = {} as Metadata;\n  metadata['type'] = 'file';\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    metadata[mapping.local] = (mapping as Mapping<unknown>).xform(\n      metadata,\n      resource[mapping.server]\n    );\n  }\n  addRef(metadata, service);\n  return metadata;\n}\n\nexport function fromResourceString(\n  service: StorageService,\n  resourceString: string,\n  mappings: Mappings\n): Metadata | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = obj as Metadata;\n  return fromResource(service, resource, mappings);\n}\n\nexport function downloadUrlFromResourceString(\n  metadata: Metadata,\n  resourceString: string\n): string | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  if (!isString(obj['downloadTokens'])) {\n    // This can happen if objects are uploaded through GCS and retrieved\n    // through list, so we don't want to throw an Error.\n    return null;\n  }\n  const tokens: string = obj['downloadTokens'] as string;\n  if (tokens.length === 0) {\n    return null;\n  }\n  const encode = encodeURIComponent;\n  const tokensList = tokens.split(',');\n  const urls = tokensList.map((token: string): string => {\n    const bucket: string = metadata['bucket'] as string;\n    const path: string = metadata['fullPath'] as string;\n    const urlPart = '/b/' + encode(bucket) + '/o/' + encode(path);\n    const base = makeUrl(urlPart);\n    const queryString = makeQueryString({\n      alt: 'media',\n      token\n    });\n    return base + queryString;\n  });\n  return urls[0];\n}\n\nexport function toResourceString(\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): string {\n  const resource: {\n    [prop: string]: unknown;\n  } = {};\n  const len = mappings.length;\n  for (let i = 0; i < len; i++) {\n    const mapping = mappings[i];\n    if (mapping.writable) {\n      resource[mapping.server] = metadata[mapping.local];\n    }\n  }\n  return JSON.stringify(resource);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Documentation for the listOptions and listResult format\n */\nimport { Location } from './location';\nimport { jsonObjectOrNull } from './json';\nimport { ListResult } from '../list';\nimport { StorageService } from '../service';\n\n/**\n * Represents the simplified object metadata returned by List API.\n * Other fields are filtered because list in Firebase Rules does not grant\n * the permission to read the metadata.\n */\ninterface ListMetadataResponse {\n  name: string;\n  bucket: string;\n}\n\n/**\n * Represents the JSON response of List API.\n */\ninterface ListResultResponse {\n  prefixes: string[];\n  items: ListMetadataResponse[];\n  nextPageToken?: string;\n}\n\nconst PREFIXES_KEY = 'prefixes';\nconst ITEMS_KEY = 'items';\n\nfunction fromBackendResponse(\n  service: StorageService,\n  bucket: string,\n  resource: ListResultResponse\n): ListResult {\n  const listResult: ListResult = {\n    prefixes: [],\n    items: [],\n    nextPageToken: resource['nextPageToken']\n  };\n  if (resource[PREFIXES_KEY]) {\n    for (const path of resource[PREFIXES_KEY]) {\n      const pathWithoutTrailingSlash = path.replace(/\\/$/, '');\n      const reference = service._makeStorageReference(\n        new Location(bucket, pathWithoutTrailingSlash)\n      );\n      listResult.prefixes.push(reference);\n    }\n  }\n\n  if (resource[ITEMS_KEY]) {\n    for (const item of resource[ITEMS_KEY]) {\n      const reference = service._makeStorageReference(\n        new Location(bucket, item['name'])\n      );\n      listResult.items.push(reference);\n    }\n  }\n  return listResult;\n}\n\nexport function fromResponseString(\n  service: StorageService,\n  bucket: string,\n  resourceString: string\n): ListResult | null {\n  const obj = jsonObjectOrNull(resourceString);\n  if (obj === null) {\n    return null;\n  }\n  const resource = (obj as unknown) as ListResultResponse;\n  return fromBackendResponse(service, bucket, resource);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { FirebaseStorageError } from './error';\nimport { Headers, XhrIo } from './xhrio';\n\n/**\n * Type for url params stored in RequestInfo.\n */\nexport interface UrlParams {\n  [name: string]: string | number;\n}\n\nexport class RequestInfo<T> {\n  urlParams: UrlParams = {};\n  headers: Headers = {};\n  body: Blob | string | Uint8Array | null = null;\n\n  errorHandler:\n    | ((p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError)\n    | null = null;\n\n  /**\n   * Called with the current number of bytes uploaded and total size (-1 if not\n   * computable) of the request body (i.e. used to report upload progress).\n   */\n  progressCallback: ((p1: number, p2: number) => void) | null = null;\n  successCodes: number[] = [200];\n  additionalRetryCodes: number[] = [];\n\n  constructor(\n    public url: string,\n    public method: string,\n    /**\n     * Returns the value with which to resolve the request's promise. Only called\n     * if the request is successful. Throw from this function to reject the\n     * returned Request's promise with the thrown error.\n     * Note: The XhrIo passed to this function may be reused after this callback\n     * returns. Do not keep a reference to it in any way.\n     */\n    public handler: (p1: XhrIo, p2: string) => T,\n    public timeout: number\n  ) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines methods for interacting with the network.\n */\n\nimport { Metadata } from '../metadata';\nimport { ListResult } from '../list';\nimport { FbsBlob } from './blob';\nimport {\n  FirebaseStorageError,\n  cannotSliceBlob,\n  unauthenticated,\n  quotaExceeded,\n  unauthorized,\n  objectNotFound,\n  serverFileWrongSize,\n  unknown\n} from './error';\nimport { Location } from './location';\nimport {\n  Mappings,\n  fromResourceString,\n  downloadUrlFromResourceString,\n  toResourceString\n} from './metadata';\nimport { fromResponseString } from './list';\nimport { RequestInfo, UrlParams } from './requestinfo';\nimport { isString } from './type';\nimport { makeUrl } from './url';\nimport { XhrIo } from './xhrio';\nimport { StorageService } from '../service';\n\n/**\n * Throws the UNKNOWN FirebaseStorageError if cndn is false.\n */\nexport function handlerCheck(cndn: boolean): void {\n  if (!cndn) {\n    throw unknown();\n  }\n}\n\nexport function metadataHandler(\n  service: StorageService,\n  mappings: Mappings\n): (p1: XhrIo, p2: string) => Metadata {\n  function handler(xhr: XhrIo, text: string): Metadata {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return metadata as Metadata;\n  }\n  return handler;\n}\n\nexport function listHandler(\n  service: StorageService,\n  bucket: string\n): (p1: XhrIo, p2: string) => ListResult {\n  function handler(xhr: XhrIo, text: string): ListResult {\n    const listResult = fromResponseString(service, bucket, text);\n    handlerCheck(listResult !== null);\n    return listResult as ListResult;\n  }\n  return handler;\n}\n\nexport function downloadUrlHandler(\n  service: StorageService,\n  mappings: Mappings\n): (p1: XhrIo, p2: string) => string | null {\n  function handler(xhr: XhrIo, text: string): string | null {\n    const metadata = fromResourceString(service, text, mappings);\n    handlerCheck(metadata !== null);\n    return downloadUrlFromResourceString(metadata as Metadata, text);\n  }\n  return handler;\n}\n\nexport function sharedErrorHandler(\n  location: Location\n): (p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError {\n  function errorHandler(\n    xhr: XhrIo,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr;\n    if (xhr.getStatus() === 401) {\n      newErr = unauthenticated();\n    } else {\n      if (xhr.getStatus() === 402) {\n        newErr = quotaExceeded(location.bucket);\n      } else {\n        if (xhr.getStatus() === 403) {\n          newErr = unauthorized(location.path);\n        } else {\n          newErr = err;\n        }\n      }\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function objectErrorHandler(\n  location: Location\n): (p1: XhrIo, p2: FirebaseStorageError) => FirebaseStorageError {\n  const shared = sharedErrorHandler(location);\n\n  function errorHandler(\n    xhr: XhrIo,\n    err: FirebaseStorageError\n  ): FirebaseStorageError {\n    let newErr = shared(xhr, err);\n    if (xhr.getStatus() === 404) {\n      newErr = objectNotFound(location.path);\n    }\n    newErr.serverResponse = err.serverResponse;\n    return newErr;\n  }\n  return errorHandler;\n}\n\nexport function getMetadata(\n  service: StorageService,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function list(\n  service: StorageService,\n  location: Location,\n  delimiter?: string,\n  pageToken?: string | null,\n  maxResults?: number | null\n): RequestInfo<ListResult> {\n  const urlParams: UrlParams = {};\n  if (location.isRoot) {\n    urlParams['prefix'] = '';\n  } else {\n    urlParams['prefix'] = location.path + '/';\n  }\n  if (delimiter && delimiter.length > 0) {\n    urlParams['delimiter'] = delimiter;\n  }\n  if (pageToken) {\n    urlParams['pageToken'] = pageToken;\n  }\n  if (maxResults) {\n    urlParams['maxResults'] = maxResults;\n  }\n  const urlPart = location.bucketOnlyServerUrl();\n  const url = makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    listHandler(service, location.bucket),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\nexport function getDownloadUrl(\n  service: StorageService,\n  location: Location,\n  mappings: Mappings\n): RequestInfo<string | null> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart);\n  const method = 'GET';\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    downloadUrlHandler(service, mappings),\n    timeout\n  );\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function updateMetadata(\n  service: StorageService,\n  location: Location,\n  metadata: Partial<Metadata>,\n  mappings: Mappings\n): RequestInfo<Metadata> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart);\n  const method = 'PATCH';\n  const body = toResourceString(metadata, mappings);\n  const headers = { 'Content-Type': 'application/json; charset=utf-8' };\n  const timeout = service.maxOperationRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function deleteObject(\n  service: StorageService,\n  location: Location\n): RequestInfo<void> {\n  const urlPart = location.fullServerUrl();\n  const url = makeUrl(urlPart);\n  const method = 'DELETE';\n  const timeout = service.maxOperationRetryTime;\n\n  function handler(_xhr: XhrIo, _text: string): void {}\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.successCodes = [200, 204];\n  requestInfo.errorHandler = objectErrorHandler(location);\n  return requestInfo;\n}\n\nexport function determineContentType_(\n  metadata: Metadata | null,\n  blob: FbsBlob | null\n): string {\n  return (\n    (metadata && metadata['contentType']) ||\n    (blob && blob.type()) ||\n    'application/octet-stream'\n  );\n}\n\nexport function metadataForUpload_(\n  location: Location,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): Metadata {\n  const metadataClone = Object.assign({}, metadata);\n  metadataClone['fullPath'] = location.path;\n  metadataClone['size'] = blob.size();\n  if (!metadataClone['contentType']) {\n    metadataClone['contentType'] = determineContentType_(null, blob);\n  }\n  return metadataClone;\n}\n\n/**\n * Prepare RequestInfo for uploads as Content-Type: multipart.\n */\nexport function multipartUpload(\n  service: StorageService,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<Metadata> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const headers: { [prop: string]: string } = {\n    'X-Goog-Upload-Protocol': 'multipart'\n  };\n\n  function genBoundary(): string {\n    let str = '';\n    for (let i = 0; i < 2; i++) {\n      str = str + Math.random().toString().slice(2);\n    }\n    return str;\n  }\n  const boundary = genBoundary();\n  headers['Content-Type'] = 'multipart/related; boundary=' + boundary;\n  const metadata_ = metadataForUpload_(location, blob, metadata);\n  const metadataString = toResourceString(metadata_, mappings);\n  const preBlobPart =\n    '--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: application/json; charset=utf-8\\r\\n\\r\\n' +\n    metadataString +\n    '\\r\\n--' +\n    boundary +\n    '\\r\\n' +\n    'Content-Type: ' +\n    metadata_['contentType'] +\n    '\\r\\n\\r\\n';\n  const postBlobPart = '\\r\\n--' + boundary + '--';\n  const body = FbsBlob.getBlob(preBlobPart, blob, postBlobPart);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n  const urlParams: UrlParams = { name: metadata_['fullPath']! };\n  const url = makeUrl(urlPart);\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(\n    url,\n    method,\n    metadataHandler(service, mappings),\n    timeout\n  );\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param current The number of bytes that have been uploaded so far.\n * @param total The total number of bytes in the upload.\n * @param opt_finalized True if the server has finished the upload.\n * @param opt_metadata The upload metadata, should\n *     only be passed if opt_finalized is true.\n */\nexport class ResumableUploadStatus {\n  finalized: boolean;\n  metadata: Metadata | null;\n\n  constructor(\n    public current: number,\n    public total: number,\n    finalized?: boolean,\n    metadata?: Metadata | null\n  ) {\n    this.finalized = !!finalized;\n    this.metadata = metadata || null;\n  }\n}\n\nexport function checkResumeHeader_(xhr: XhrIo, allowed?: string[]): string {\n  let status: string | null = null;\n  try {\n    status = xhr.getResponseHeader('X-Goog-Upload-Status');\n  } catch (e) {\n    handlerCheck(false);\n  }\n  const allowedStatus = allowed || ['active'];\n  handlerCheck(!!status && allowedStatus.indexOf(status) !== -1);\n  return status as string;\n}\n\nexport function createResumableUpload(\n  service: StorageService,\n  location: Location,\n  mappings: Mappings,\n  blob: FbsBlob,\n  metadata?: Metadata | null\n): RequestInfo<string> {\n  const urlPart = location.bucketOnlyServerUrl();\n  const metadataForUpload = metadataForUpload_(location, blob, metadata);\n  const urlParams: UrlParams = { name: metadataForUpload['fullPath']! };\n  const url = makeUrl(urlPart);\n  const method = 'POST';\n  const headers = {\n    'X-Goog-Upload-Protocol': 'resumable',\n    'X-Goog-Upload-Command': 'start',\n    'X-Goog-Upload-Header-Content-Length': blob.size(),\n    'X-Goog-Upload-Header-Content-Type': metadataForUpload['contentType']!,\n    'Content-Type': 'application/json; charset=utf-8'\n  };\n  const body = toResourceString(metadataForUpload, mappings);\n  const timeout = service.maxUploadRetryTime;\n\n  function handler(xhr: XhrIo): string {\n    checkResumeHeader_(xhr);\n    let url;\n    try {\n      url = xhr.getResponseHeader('X-Goog-Upload-URL');\n    } catch (e) {\n      handlerCheck(false);\n    }\n    handlerCheck(isString(url));\n    return url as string;\n  }\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.urlParams = urlParams;\n  requestInfo.headers = headers;\n  requestInfo.body = body;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n */\nexport function getResumableUploadStatus(\n  service: StorageService,\n  location: Location,\n  url: string,\n  blob: FbsBlob\n): RequestInfo<ResumableUploadStatus> {\n  const headers = { 'X-Goog-Upload-Command': 'query' };\n\n  function handler(xhr: XhrIo): ResumableUploadStatus {\n    const status = checkResumeHeader_(xhr, ['active', 'final']);\n    let sizeString: string | null = null;\n    try {\n      sizeString = xhr.getResponseHeader('X-Goog-Upload-Size-Received');\n    } catch (e) {\n      handlerCheck(false);\n    }\n\n    if (!sizeString) {\n      // null or empty string\n      handlerCheck(false);\n    }\n\n    const size = Number(sizeString);\n    handlerCheck(!isNaN(size));\n    return new ResumableUploadStatus(size, blob.size(), status === 'final');\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n\n/**\n * Any uploads via the resumable upload API must transfer a number of bytes\n * that is a multiple of this number.\n */\nexport const RESUMABLE_UPLOAD_CHUNK_SIZE: number = 256 * 1024;\n\n/**\n * @param url From a call to fbs.requests.createResumableUpload.\n * @param chunkSize Number of bytes to upload.\n * @param status The previous status.\n *     If not passed or null, we start from the beginning.\n * @throws fbs.Error If the upload is already complete, the passed in status\n *     has a final size inconsistent with the blob, or the blob cannot be sliced\n *     for upload.\n */\nexport function continueResumableUpload(\n  location: Location,\n  service: StorageService,\n  url: string,\n  blob: FbsBlob,\n  chunkSize: number,\n  mappings: Mappings,\n  status?: ResumableUploadStatus | null,\n  progressCallback?: ((p1: number, p2: number) => void) | null\n): RequestInfo<ResumableUploadStatus> {\n  // TODO(andysoto): standardize on internal asserts\n  // assert(!(opt_status && opt_status.finalized));\n  const status_ = new ResumableUploadStatus(0, 0);\n  if (status) {\n    status_.current = status.current;\n    status_.total = status.total;\n  } else {\n    status_.current = 0;\n    status_.total = blob.size();\n  }\n  if (blob.size() !== status_.total) {\n    throw serverFileWrongSize();\n  }\n  const bytesLeft = status_.total - status_.current;\n  let bytesToUpload = bytesLeft;\n  if (chunkSize > 0) {\n    bytesToUpload = Math.min(bytesToUpload, chunkSize);\n  }\n  const startByte = status_.current;\n  const endByte = startByte + bytesToUpload;\n  const uploadCommand =\n    bytesToUpload === bytesLeft ? 'upload, finalize' : 'upload';\n  const headers = {\n    'X-Goog-Upload-Command': uploadCommand,\n    'X-Goog-Upload-Offset': status_.current\n  };\n  const body = blob.slice(startByte, endByte);\n  if (body === null) {\n    throw cannotSliceBlob();\n  }\n\n  function handler(xhr: XhrIo, text: string): ResumableUploadStatus {\n    // TODO(andysoto): Verify the MD5 of each uploaded range:\n    // the 'x-range-md5' header comes back with status code 308 responses.\n    // We'll only be able to bail out though, because you can't re-upload a\n    // range that you previously uploaded.\n    const uploadStatus = checkResumeHeader_(xhr, ['active', 'final']);\n    const newCurrent = status_.current + bytesToUpload;\n    const size = blob.size();\n    let metadata;\n    if (uploadStatus === 'final') {\n      metadata = metadataHandler(service, mappings)(xhr, text);\n    } else {\n      metadata = null;\n    }\n    return new ResumableUploadStatus(\n      newCurrent,\n      size,\n      uploadStatus === 'final',\n      metadata\n    );\n  }\n  const method = 'POST';\n  const timeout = service.maxUploadRetryTime;\n  const requestInfo = new RequestInfo(url, method, handler, timeout);\n  requestInfo.headers = headers;\n  requestInfo.body = body.uploadData();\n  requestInfo.progressCallback = progressCallback || null;\n  requestInfo.errorHandler = sharedErrorHandler(location);\n  return requestInfo;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isFunction } from './type';\nimport { FirebaseStorageError } from './error';\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: FirebaseStorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * An observer identical to the `Observer` defined in packages/util except the\n * error passed into the ErrorFn is specifically a `FirebaseStorageError`.\n */\nexport interface StorageObserver<T> {\n  /**\n   * Function that is called once for each value in the event stream.\n   */\n  next?: NextFn<T>;\n  /**\n   * A function that is called with a `FirebaseStorageError`\n   * if the event stream ends due to an error.\n   */\n  error?: ErrorFn;\n  /**\n   * A function that is called if the event stream ends normally.\n   */\n  complete?: CompleteFn;\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\nexport class Observer<T> implements StorageObserver<T> {\n  next?: NextFn<T>;\n  error?: ErrorFn;\n  complete?: CompleteFn;\n\n  constructor(\n    nextOrObserver?: NextFn<T> | StorageObserver<T>,\n    error?: ErrorFn,\n    complete?: CompleteFn\n  ) {\n    const asFunctions =\n      isFunction(nextOrObserver) || error != null || complete != null;\n    if (asFunctions) {\n      this.next = nextOrObserver as NextFn<T>;\n      this.error = error;\n      this.complete = complete;\n    } else {\n      const observer = nextOrObserver as {\n        next?: NextFn<T>;\n        error?: ErrorFn;\n        complete?: CompleteFn;\n      };\n      this.next = observer.next;\n      this.error = observer.error;\n      this.complete = observer.complete;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Returns a function that invokes f with its arguments asynchronously as a\n * microtask, i.e. as soon as possible after the current script returns back\n * into browser code.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function async(f: Function): Function {\n  return (...argsToForward: unknown[]) => {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve().then(() => f(...argsToForward));\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @fileoverview Defines types for interacting with blob transfer tasks.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport {\n  canceled,\n  StorageErrorCode,\n  FirebaseStorageError\n} from './implementation/error';\nimport {\n  InternalTaskState,\n  TaskEvent,\n  TaskState,\n  taskStateFromInternalTaskState\n} from './implementation/taskenums';\nimport { Metadata } from './metadata';\nimport {\n  CompleteFn,\n  ErrorFn,\n  Observer,\n  StorageObserver,\n  Subscribe,\n  Unsubscribe\n} from './implementation/observer';\nimport { Request } from './implementation/request';\nimport { UploadTaskSnapshot } from './tasksnapshot';\nimport { async as fbsAsync } from './implementation/async';\nimport { Mappings, getMappings } from './implementation/metadata';\nimport {\n  createResumableUpload,\n  getResumableUploadStatus,\n  RESUMABLE_UPLOAD_CHUNK_SIZE,\n  ResumableUploadStatus,\n  continueResumableUpload,\n  getMetadata,\n  multipartUpload\n} from './implementation/requests';\nimport { Reference } from './reference';\n\n/**\n * Represents a blob being uploaded. Can be used to pause/resume/cancel the\n * upload and manage callbacks for various events.\n * @internal\n */\nexport class UploadTask {\n  private _ref: Reference;\n  /**\n   * The data to be uploaded.\n   */\n  _blob: FbsBlob;\n  /**\n   * Metadata related to the upload.\n   */\n  _metadata: Metadata | null;\n  private _mappings: Mappings;\n  /**\n   * Number of bytes transferred so far.\n   */\n  _transferred: number = 0;\n  private _needToFetchStatus: boolean = false;\n  private _needToFetchMetadata: boolean = false;\n  private _observers: Array<StorageObserver<UploadTaskSnapshot>> = [];\n  private _resumable: boolean;\n  /**\n   * Upload state.\n   */\n  _state: InternalTaskState;\n  private _error?: FirebaseStorageError = undefined;\n  private _uploadUrl?: string = undefined;\n  private _request?: Request<unknown> = undefined;\n  private _chunkMultiplier: number = 1;\n  private _errorHandler: (p1: FirebaseStorageError) => void;\n  private _metadataErrorHandler: (p1: FirebaseStorageError) => void;\n  private _resolve?: (p1: UploadTaskSnapshot) => void = undefined;\n  private _reject?: (p1: FirebaseStorageError) => void = undefined;\n  private _promise: Promise<UploadTaskSnapshot>;\n\n  /**\n   * @param ref - The firebaseStorage.Reference object this task came\n   *     from, untyped to avoid cyclic dependencies.\n   * @param blob - The blob to upload.\n   */\n  constructor(ref: Reference, blob: FbsBlob, metadata: Metadata | null = null) {\n    this._ref = ref;\n    this._blob = blob;\n    this._metadata = metadata;\n    this._mappings = getMappings();\n    this._resumable = this._shouldDoResumable(this._blob);\n    this._state = InternalTaskState.RUNNING;\n    this._errorHandler = error => {\n      this._request = undefined;\n      this._chunkMultiplier = 1;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this._needToFetchStatus = true;\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._metadataErrorHandler = error => {\n      this._request = undefined;\n      if (error._codeEquals(StorageErrorCode.CANCELED)) {\n        this.completeTransitions_();\n      } else {\n        this._error = error;\n        this._transition(InternalTaskState.ERROR);\n      }\n    };\n    this._promise = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n      this._start();\n    });\n\n    // Prevent uncaught rejections on the internal promise from bubbling out\n    // to the top level with a dummy handler.\n    this._promise.then(null, () => {});\n  }\n\n  private _makeProgressCallback(): (p1: number, p2: number) => void {\n    const sizeBefore = this._transferred;\n    return loaded => this._updateProgress(sizeBefore + loaded);\n  }\n\n  private _shouldDoResumable(blob: FbsBlob): boolean {\n    return blob.size() > 256 * 1024;\n  }\n\n  private _start(): void {\n    if (this._state !== InternalTaskState.RUNNING) {\n      // This can happen if someone pauses us in a resume callback, for example.\n      return;\n    }\n    if (this._request !== undefined) {\n      return;\n    }\n    if (this._resumable) {\n      if (this._uploadUrl === undefined) {\n        this._createResumable();\n      } else {\n        if (this._needToFetchStatus) {\n          this._fetchStatus();\n        } else {\n          if (this._needToFetchMetadata) {\n            // Happens if we miss the metadata on upload completion.\n            this._fetchMetadata();\n          } else {\n            this._continueUpload();\n          }\n        }\n      }\n    } else {\n      this._oneShotUpload();\n    }\n  }\n\n  private _resolveToken(callback: (p1: string | null) => void): void {\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this._ref.storage._getAuthToken().then(authToken => {\n      switch (this._state) {\n        case InternalTaskState.RUNNING:\n          callback(authToken);\n          break;\n        case InternalTaskState.CANCELING:\n          this._transition(InternalTaskState.CANCELED);\n          break;\n        case InternalTaskState.PAUSING:\n          this._transition(InternalTaskState.PAUSED);\n          break;\n        default:\n      }\n    });\n  }\n\n  // TODO(andysoto): assert false\n\n  private _createResumable(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = createResumableUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const createRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = createRequest;\n      createRequest.getPromise().then((url: string) => {\n        this._request = undefined;\n        this._uploadUrl = url;\n        this._needToFetchStatus = false;\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _fetchStatus(): void {\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken(authToken => {\n      const requestInfo = getResumableUploadStatus(\n        this._ref.storage,\n        this._ref._location,\n        url,\n        this._blob\n      );\n      const statusRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = statusRequest;\n      statusRequest.getPromise().then(status => {\n        status = status as ResumableUploadStatus;\n        this._request = undefined;\n        this._updateProgress(status.current);\n        this._needToFetchStatus = false;\n        if (status.finalized) {\n          this._needToFetchMetadata = true;\n        }\n        this.completeTransitions_();\n      }, this._errorHandler);\n    });\n  }\n\n  private _continueUpload(): void {\n    const chunkSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n    const status = new ResumableUploadStatus(\n      this._transferred,\n      this._blob.size()\n    );\n\n    // TODO(andysoto): assert(this.uploadUrl_ !== null);\n    const url = this._uploadUrl as string;\n    this._resolveToken(authToken => {\n      let requestInfo;\n      try {\n        requestInfo = continueResumableUpload(\n          this._ref._location,\n          this._ref.storage,\n          url,\n          this._blob,\n          chunkSize,\n          this._mappings,\n          status,\n          this._makeProgressCallback()\n        );\n      } catch (e) {\n        this._error = e;\n        this._transition(InternalTaskState.ERROR);\n        return;\n      }\n      const uploadRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = uploadRequest;\n      uploadRequest.getPromise().then((newStatus: ResumableUploadStatus) => {\n        this._increaseMultiplier();\n        this._request = undefined;\n        this._updateProgress(newStatus.current);\n        if (newStatus.finalized) {\n          this._metadata = newStatus.metadata;\n          this._transition(InternalTaskState.SUCCESS);\n        } else {\n          this.completeTransitions_();\n        }\n      }, this._errorHandler);\n    });\n  }\n\n  private _increaseMultiplier(): void {\n    const currentSize = RESUMABLE_UPLOAD_CHUNK_SIZE * this._chunkMultiplier;\n\n    // Max chunk size is 32M.\n    if (currentSize < 32 * 1024 * 1024) {\n      this._chunkMultiplier *= 2;\n    }\n  }\n\n  private _fetchMetadata(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = getMetadata(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings\n      );\n      const metadataRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = metadataRequest;\n      metadataRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._metadataErrorHandler);\n    });\n  }\n\n  private _oneShotUpload(): void {\n    this._resolveToken(authToken => {\n      const requestInfo = multipartUpload(\n        this._ref.storage,\n        this._ref._location,\n        this._mappings,\n        this._blob,\n        this._metadata\n      );\n      const multipartRequest = this._ref.storage._makeRequest(\n        requestInfo,\n        authToken\n      );\n      this._request = multipartRequest;\n      multipartRequest.getPromise().then(metadata => {\n        this._request = undefined;\n        this._metadata = metadata;\n        this._updateProgress(this._blob.size());\n        this._transition(InternalTaskState.SUCCESS);\n      }, this._errorHandler);\n    });\n  }\n\n  private _updateProgress(transferred: number): void {\n    const old = this._transferred;\n    this._transferred = transferred;\n\n    // A progress update can make the \"transferred\" value smaller (e.g. a\n    // partial upload not completed by server, after which the \"transferred\"\n    // value may reset to the value at the beginning of the request).\n    if (this._transferred !== old) {\n      this._notifyObservers();\n    }\n  }\n\n  private _transition(state: InternalTaskState): void {\n    if (this._state === state) {\n      return;\n    }\n    switch (state) {\n      case InternalTaskState.CANCELING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.PAUSING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING);\n        this._state = state;\n        if (this._request !== undefined) {\n          this._request.cancel();\n        }\n        break;\n      case InternalTaskState.RUNNING:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.PAUSING);\n        const wasPaused = this._state === InternalTaskState.PAUSED;\n        this._state = state;\n        if (wasPaused) {\n          this._notifyObservers();\n          this._start();\n        }\n        break;\n      case InternalTaskState.PAUSED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.CANCELED:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.PAUSED ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._error = canceled();\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.ERROR:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      case InternalTaskState.SUCCESS:\n        // TODO(andysoto):\n        // assert(this.state_ === InternalTaskState.RUNNING ||\n        //        this.state_ === InternalTaskState.PAUSING ||\n        //        this.state_ === InternalTaskState.CANCELING);\n        this._state = state;\n        this._notifyObservers();\n        break;\n      default: // Ignore\n    }\n  }\n\n  private completeTransitions_(): void {\n    switch (this._state) {\n      case InternalTaskState.PAUSING:\n        this._transition(InternalTaskState.PAUSED);\n        break;\n      case InternalTaskState.CANCELING:\n        this._transition(InternalTaskState.CANCELED);\n        break;\n      case InternalTaskState.RUNNING:\n        this._start();\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        break;\n    }\n  }\n\n  /**\n   * A snapshot of the current task state.\n   */\n  get snapshot(): UploadTaskSnapshot {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    return {\n      bytesTransferred: this._transferred,\n      totalBytes: this._blob.size(),\n      state: externalState,\n      metadata: this._metadata!,\n      task: this,\n      ref: this._ref\n    };\n  }\n\n  /**\n   * Adds a callback for an event.\n   * @param type - The type of event to listen for.\n   * @param nextOrObserver -\n   *     The `next` function, which gets called for each item in\n   *     the event stream, or an observer object with some or all of these three\n   *     properties (`next`, `error`, `complete`).\n   * @param error - A function that gets called with a `FirebaseStorageError`\n   *     if the event stream ends due to an error.\n   * @param completed - A function that gets called if the\n   *     event stream ends normally.\n   * @returns\n   *     If only the event argument is passed, returns a function you can use to\n   *     add callbacks (see the examples above). If more than just the event\n   *     argument is passed, returns a function you can call to unregister the\n   *     callbacks.\n   */\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | StorageObserver<UploadTaskSnapshot>\n      | ((a: UploadTaskSnapshot) => unknown),\n    error?: ErrorFn,\n    completed?: CompleteFn\n  ): Unsubscribe | Subscribe<UploadTaskSnapshot> {\n    const observer = new Observer(nextOrObserver, error, completed);\n    this._addObserver(observer);\n    return () => {\n      this._removeObserver(observer);\n    };\n  }\n\n  /**\n   * This object behaves like a Promise, and resolves with its snapshot data\n   * when the upload completes.\n   * @param onFulfilled - The fulfillment callback. Promise chaining works as normal.\n   * @param onRejected - The rejection callback.\n   */\n  then<U>(\n    onFulfilled?: ((value: UploadTaskSnapshot) => U | Promise<U>) | null,\n    onRejected?: ((error: FirebaseStorageError) => U | Promise<U>) | null\n  ): Promise<U> {\n    // These casts are needed so that TypeScript can infer the types of the\n    // resulting Promise.\n    return this._promise.then<U>(\n      onFulfilled as (value: UploadTaskSnapshot) => U | Promise<U>,\n      onRejected as ((error: unknown) => Promise<never>) | null\n    );\n  }\n\n  /**\n   * Equivalent to calling `then(null, onRejected)`.\n   */\n  catch<T>(\n    onRejected: (p1: FirebaseStorageError) => T | Promise<T>\n  ): Promise<T> {\n    return this.then(null, onRejected);\n  }\n\n  /**\n   * Adds the given observer.\n   */\n  private _addObserver(observer: Observer<UploadTaskSnapshot>): void {\n    this._observers.push(observer);\n    this._notifyObserver(observer);\n  }\n\n  /**\n   * Removes the given observer.\n   */\n  private _removeObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const i = this._observers.indexOf(observer);\n    if (i !== -1) {\n      this._observers.splice(i, 1);\n    }\n  }\n\n  private _notifyObservers(): void {\n    this._finishPromise();\n    const observers = this._observers.slice();\n    observers.forEach(observer => {\n      this._notifyObserver(observer);\n    });\n  }\n\n  private _finishPromise(): void {\n    if (this._resolve !== undefined) {\n      let triggered = true;\n      switch (taskStateFromInternalTaskState(this._state)) {\n        case TaskState.SUCCESS:\n          fbsAsync(this._resolve.bind(null, this.snapshot))();\n          break;\n        case TaskState.CANCELED:\n        case TaskState.ERROR:\n          const toCall = this._reject as (p1: FirebaseStorageError) => void;\n          fbsAsync(toCall.bind(null, this._error as FirebaseStorageError))();\n          break;\n        default:\n          triggered = false;\n          break;\n      }\n      if (triggered) {\n        this._resolve = undefined;\n        this._reject = undefined;\n      }\n    }\n  }\n\n  private _notifyObserver(observer: Observer<UploadTaskSnapshot>): void {\n    const externalState = taskStateFromInternalTaskState(this._state);\n    switch (externalState) {\n      case TaskState.RUNNING:\n      case TaskState.PAUSED:\n        if (observer.next) {\n          fbsAsync(observer.next.bind(observer, this.snapshot))();\n        }\n        break;\n      case TaskState.SUCCESS:\n        if (observer.complete) {\n          fbsAsync(observer.complete.bind(observer))();\n        }\n        break;\n      case TaskState.CANCELED:\n      case TaskState.ERROR:\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n        break;\n      default:\n        // TODO(andysoto): assert(false);\n        if (observer.error) {\n          fbsAsync(\n            observer.error.bind(observer, this._error as FirebaseStorageError)\n          )();\n        }\n    }\n  }\n\n  /**\n   * Resumes a paused task. Has no effect on a currently running or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  resume(): boolean {\n    const valid =\n      this._state === InternalTaskState.PAUSED ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.RUNNING);\n    }\n    return valid;\n  }\n\n  /**\n   * Pauses a currently running task. Has no effect on a paused or failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  pause(): boolean {\n    const valid = this._state === InternalTaskState.RUNNING;\n    if (valid) {\n      this._transition(InternalTaskState.PAUSING);\n    }\n    return valid;\n  }\n\n  /**\n   * Cancels a currently running or paused task. Has no effect on a complete or\n   * failed task.\n   * @returns True if the operation took effect, false if ignored.\n   */\n  cancel(): boolean {\n    const valid =\n      this._state === InternalTaskState.RUNNING ||\n      this._state === InternalTaskState.PAUSING;\n    if (valid) {\n      this._transition(InternalTaskState.CANCELING);\n    }\n    return valid;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Defines the Firebase StorageReference class.\n */\n\nimport { FbsBlob } from './implementation/blob';\nimport { Location } from './implementation/location';\nimport { getMappings } from './implementation/metadata';\nimport { child, parent, lastComponent } from './implementation/path';\nimport {\n  list as requestsList,\n  getMetadata as requestsGetMetadata,\n  updateMetadata as requestsUpdateMetadata,\n  getDownloadUrl as requestsGetDownloadUrl,\n  deleteObject as requestsDeleteObject,\n  multipartUpload\n} from './implementation/requests';\nimport { ListOptions } from '../exp/public-types';\nimport { StringFormat, dataFromString } from './implementation/string';\nimport { Metadata } from './metadata';\nimport { StorageService } from './service';\nimport { ListResult } from './list';\nimport { UploadTask } from './task';\nimport { invalidRootOperation, noDownloadURL } from './implementation/error';\nimport { validateNumber } from './implementation/type';\nimport { UploadResult } from './tasksnapshot';\n\n/**\n * Provides methods to interact with a bucket in the Firebase Storage service.\n * @internal\n * @param _location - An fbs.location, or the URL at\n *     which to base this object, in one of the following forms:\n *         gs://<bucket>/<object-path>\n *         http[s]://firebasestorage.googleapis.com/\n *                     <api-version>/b/<bucket>/o/<object-path>\n *     Any query or fragment strings will be ignored in the http[s]\n *     format. If no value is passed, the storage object will use a URL based on\n *     the project ID of the base firebase.App instance.\n */\nexport class Reference {\n  _location: Location;\n\n  constructor(private _service: StorageService, location: string | Location) {\n    if (location instanceof Location) {\n      this._location = location;\n    } else {\n      this._location = Location.makeFromUrl(location);\n    }\n  }\n\n  /**\n   * Returns the URL for the bucket and path this object references,\n   *     in the form gs://<bucket>/<object-path>\n   * @override\n   */\n  toString(): string {\n    return 'gs://' + this._location.bucket + '/' + this._location.path;\n  }\n\n  protected _newRef(service: StorageService, location: Location): Reference {\n    return new Reference(service, location);\n  }\n\n  /**\n   * A reference to the root of this object's bucket.\n   */\n  get root(): Reference {\n    const location = new Location(this._location.bucket, '');\n    return this._newRef(this._service, location);\n  }\n\n  /**\n   * The name of the bucket containing this reference's object.\n   */\n  get bucket(): string {\n    return this._location.bucket;\n  }\n\n  /**\n   * The full path of this object.\n   */\n  get fullPath(): string {\n    return this._location.path;\n  }\n\n  /**\n   * The short name of this object, which is the last component of the full path.\n   * For example, if fullPath is 'full/path/image.png', name is 'image.png'.\n   */\n  get name(): string {\n    return lastComponent(this._location.path);\n  }\n\n  /**\n   * The `StorageService` instance this `StorageReference` is associated with.\n   */\n  get storage(): StorageService {\n    return this._service;\n  }\n\n  /**\n   * A `StorageReference` pointing to the parent location of this `StorageReference`, or null if\n   * this reference is the root.\n   */\n  get parent(): Reference | null {\n    const newPath = parent(this._location.path);\n    if (newPath === null) {\n      return null;\n    }\n    const location = new Location(this._location.bucket, newPath);\n    return new Reference(this._service, location);\n  }\n\n  /**\n   * Utility function to throw an error in methods that do not accept a root reference.\n   */\n  _throwIfRoot(name: string): void {\n    if (this._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n *\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadBytes');\n  return ref.storage\n    ._getAuthToken()\n    .then(authToken => {\n      const requestInfo = multipartUpload(\n        ref.storage,\n        ref._location,\n        getMappings(),\n        new FbsBlob(data, true),\n        metadata\n      );\n      const multipartRequest = ref.storage._makeRequest(requestInfo, authToken);\n      return multipartRequest.getPromise();\n    })\n    .then(finalMetadata => {\n      return {\n        metadata: finalMetadata,\n        ref\n      };\n    });\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the newly uploaded data.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: Reference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: Metadata\n): UploadTask {\n  ref._throwIfRoot('uploadBytesResumable');\n  return new UploadTask(ref, new FbsBlob(data), metadata);\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the newly uploaded string.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: Reference,\n  value: string,\n  format: StringFormat = StringFormat.RAW,\n  metadata?: Metadata\n): Promise<UploadResult> {\n  ref._throwIfRoot('uploadString');\n  const data = dataFromString(format, value);\n  const metadataClone = { ...metadata } as Metadata;\n  if (metadataClone['contentType'] == null && data.contentType != null) {\n    metadataClone['contentType'] = data.contentType!;\n  }\n  return uploadBytes(ref, data.data, metadataClone);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: Reference): Promise<ListResult> {\n  const accumulator: ListResult = {\n    prefixes: [],\n    items: []\n  };\n  return listAllHelper(ref, accumulator).then(() => accumulator);\n}\n\n/**\n * Separated from listAll because async functions can't use \"arguments\".\n * @param ref\n * @param accumulator\n * @param pageToken\n */\nasync function listAllHelper(\n  ref: Reference,\n  accumulator: ListResult,\n  pageToken?: string\n): Promise<void> {\n  const opt: ListOptions = {\n    // maxResults is 1000 by default.\n    pageToken\n  };\n  const nextPage = await list(ref, opt);\n  accumulator.prefixes.push(...nextPage.prefixes);\n  accumulator.items.push(...nextPage.items);\n  if (nextPage.nextPageToken != null) {\n    await listAllHelper(ref, accumulator, nextPage.nextPageToken);\n  }\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport async function list(\n  ref: Reference,\n  options?: ListOptions | null\n): Promise<ListResult> {\n  if (options != null) {\n    if (typeof options.maxResults === 'number') {\n      validateNumber(\n        'options.maxResults',\n        /* minValue= */ 1,\n        /* maxValue= */ 1000,\n        options.maxResults\n      );\n    }\n  }\n  const authToken = await ref.storage._getAuthToken();\n  const op = options || {};\n  const requestInfo = requestsList(\n    ref.storage,\n    ref._location,\n    /*delimiter= */ '/',\n    op.pageToken,\n    op.maxResults\n  );\n  return ref.storage._makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * A promise that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport async function getMetadata(ref: Reference): Promise<Metadata> {\n  ref._throwIfRoot('getMetadata');\n  const authToken = await ref.storage._getAuthToken();\n  const requestInfo = requestsGetMetadata(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage._makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A promise that resolves\n *     with the new metadata for this object.\n *     See `firebaseStorage.Reference.prototype.getMetadata`\n */\nexport async function updateMetadata(\n  ref: Reference,\n  metadata: Partial<Metadata>\n): Promise<Metadata> {\n  ref._throwIfRoot('updateMetadata');\n  const authToken = await ref.storage._getAuthToken();\n  const requestInfo = requestsUpdateMetadata(\n    ref.storage,\n    ref._location,\n    metadata,\n    getMappings()\n  );\n  return ref.storage._makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A promise that resolves with the download\n *     URL for this object.\n */\nexport async function getDownloadURL(ref: Reference): Promise<string> {\n  ref._throwIfRoot('getDownloadURL');\n  const authToken = await ref.storage._getAuthToken();\n  const requestInfo = requestsGetDownloadUrl(\n    ref.storage,\n    ref._location,\n    getMappings()\n  );\n  return ref.storage\n    ._makeRequest(requestInfo, authToken)\n    .getPromise()\n    .then(url => {\n      if (url === null) {\n        throw noDownloadURL();\n      }\n      return url;\n    });\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A promise that resolves if the deletion succeeds.\n */\nexport async function deleteObject(ref: Reference): Promise<void> {\n  ref._throwIfRoot('deleteObject');\n  const authToken = await ref.storage._getAuthToken();\n  const requestInfo = requestsDeleteObject(ref.storage, ref._location);\n  return ref.storage._makeRequest(requestInfo, authToken).getPromise();\n}\n\n/**\n * Returns reference for object obtained by appending `childPath` to `ref`.\n *\n * @param ref - StorageReference to get child of.\n * @param childPath - Child path from provided ref.\n * @returns A reference to the object obtained by\n * appending childPath, removing any duplicate, beginning, or trailing\n * slashes.\n *\n */\nexport function _getChild(ref: Reference, childPath: string): Reference {\n  const newPath = child(ref._location.path, childPath);\n  const location = new Location(ref._location.bucket, newPath);\n  return new Reference(ref.storage, location);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from './implementation/location';\nimport { FailRequest } from './implementation/failrequest';\nimport { Request, makeRequest } from './implementation/request';\nimport { RequestInfo } from './implementation/requestinfo';\nimport { XhrIoPool } from './implementation/xhriopool';\nimport { Reference, _getChild } from './reference';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport {\n  FirebaseApp,\n  FirebaseOptions,\n  _FirebaseService\n  // eslint-disable-next-line import/no-extraneous-dependencies\n} from '@firebase/app-exp';\nimport {\n  CONFIG_STORAGE_BUCKET_KEY,\n  DEFAULT_MAX_OPERATION_RETRY_TIME,\n  DEFAULT_MAX_UPLOAD_RETRY_TIME\n} from '../src/implementation/constants';\nimport {\n  invalidArgument,\n  appDeleted,\n  noDefaultBucket\n} from './implementation/error';\nimport { validateNumber } from './implementation/type';\n\nexport function isUrl(path?: string): boolean {\n  return /^[A-Za-z]+:\\/\\//.test(path as string);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given url.\n */\nfunction refFromURL(service: StorageService, url: string): Reference {\n  return new Reference(service, url);\n}\n\n/**\n * Returns a firebaseStorage.Reference for the given path in the default\n * bucket.\n */\nfunction refFromPath(\n  ref: StorageService | Reference,\n  path?: string\n): Reference {\n  if (ref instanceof StorageService) {\n    const service = ref;\n    if (service._bucket == null) {\n      throw noDefaultBucket();\n    }\n    const reference = new Reference(service, service._bucket!);\n    if (path != null) {\n      return refFromPath(reference, path);\n    } else {\n      return reference;\n    }\n  } else {\n    // ref is a Reference\n    if (path !== undefined) {\n      if (path.includes('..')) {\n        throw invalidArgument('`path` param cannot contain \"..\"');\n      }\n      return _getChild(ref, path);\n    } else {\n      return ref;\n    }\n  }\n}\n\n/**\n * Returns a storage Reference for the given url.\n * @param storage - `Storage` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: StorageService, url?: string): Reference;\n/**\n * Returns a storage Reference for the given path in the\n * default bucket.\n * @param storageOrRef - `Storage` service or storage `Reference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: StorageService | Reference,\n  path?: string\n): Reference;\nexport function ref(\n  serviceOrRef: StorageService | Reference,\n  pathOrUrl?: string\n): Reference | null {\n  if (pathOrUrl && isUrl(pathOrUrl)) {\n    if (serviceOrRef instanceof StorageService) {\n      return refFromURL(serviceOrRef, pathOrUrl);\n    } else {\n      throw invalidArgument(\n        'To use ref(service, url), the first argument must be a Storage instance.'\n      );\n    }\n  } else {\n    return refFromPath(serviceOrRef, pathOrUrl);\n  }\n}\n\nfunction extractBucket(config?: FirebaseOptions): Location | null {\n  const bucketString = config?.[CONFIG_STORAGE_BUCKET_KEY];\n  if (bucketString == null) {\n    return null;\n  }\n  return Location.makeFromBucketSpec(bucketString);\n}\n\n/**\n * A service that provides Firebase Storage Reference instances.\n * @public\n * @param opt_url - gs:// url to a custom Storage Bucket\n */\nexport class StorageService implements _FirebaseService {\n  readonly _bucket: Location | null = null;\n  protected readonly _appId: string | null = null;\n  private readonly _requests: Set<Request<unknown>>;\n  private _deleted: boolean = false;\n  private _maxOperationRetryTime: number;\n  private _maxUploadRetryTime: number;\n\n  constructor(\n    /**\n     * FirebaseApp associated with this StorageService instance.\n     */\n    readonly app: FirebaseApp,\n    readonly _authProvider: Provider<FirebaseAuthInternalName>,\n    readonly _pool: XhrIoPool,\n    readonly _url?: string,\n    readonly _firebaseVersion?: string\n  ) {\n    this._maxOperationRetryTime = DEFAULT_MAX_OPERATION_RETRY_TIME;\n    this._maxUploadRetryTime = DEFAULT_MAX_UPLOAD_RETRY_TIME;\n    this._requests = new Set();\n    if (_url != null) {\n      this._bucket = Location.makeFromBucketSpec(_url);\n    } else {\n      this._bucket = extractBucket(this.app.options);\n    }\n  }\n\n  /**\n   * The maximum time to retry uploads in milliseconds.\n   */\n  get maxUploadRetryTime(): number {\n    return this._maxUploadRetryTime;\n  }\n\n  set maxUploadRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxUploadRetryTime = time;\n  }\n\n  /**\n   * The maximum time to retry operations other than uploads or downloads in\n   * milliseconds.\n   */\n  get maxOperationRetryTime(): number {\n    return this._maxOperationRetryTime;\n  }\n\n  set maxOperationRetryTime(time: number) {\n    validateNumber(\n      'time',\n      /* minValue=*/ 0,\n      /* maxValue= */ Number.POSITIVE_INFINITY,\n      time\n    );\n    this._maxOperationRetryTime = time;\n  }\n\n  async _getAuthToken(): Promise<string | null> {\n    const auth = this._authProvider.getImmediate({ optional: true });\n    if (auth) {\n      const tokenData = await auth.getToken();\n      if (tokenData !== null) {\n        return tokenData.accessToken;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Stop running requests and prevent more from being created.\n   */\n  _delete(): Promise<void> {\n    this._deleted = true;\n    this._requests.forEach(request => request.cancel());\n    this._requests.clear();\n    return Promise.resolve();\n  }\n\n  /**\n   * Returns a new firebaseStorage.Reference object referencing this StorageService\n   * at the given Location.\n   */\n  _makeStorageReference(loc: Location): Reference {\n    return new Reference(this, loc);\n  }\n\n  /**\n   * @param requestInfo - HTTP RequestInfo object\n   * @param authToken - Firebase auth token\n   */\n  _makeRequest<T>(\n    requestInfo: RequestInfo<T>,\n    authToken: string | null\n  ): Request<T> {\n    if (!this._deleted) {\n      const request = makeRequest(\n        requestInfo,\n        this._appId,\n        authToken,\n        this._pool,\n        this._firebaseVersion\n      );\n      this._requests.add(request);\n      // Request removes itself from set when complete.\n      request.getPromise().then(\n        () => this._requests.delete(request),\n        () => this._requests.delete(request)\n      );\n      return request;\n    } else {\n      return new FailRequest(appDeleted());\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  _getProvider,\n  FirebaseApp,\n  getApp\n  // eslint-disable-next-line import/no-extraneous-dependencies\n} from '@firebase/app-exp';\n\nimport {\n  ref as refInternal,\n  StorageService as StorageServiceInternal\n} from '../src/service';\nimport { Provider } from '@firebase/component';\n\nimport {\n  StorageReference,\n  StorageService,\n  UploadResult,\n  ListOptions,\n  ListResult,\n  UploadTask,\n  SettableMetadata,\n  UploadMetadata,\n  FullMetadata\n} from './public-types';\nimport { Metadata as MetadataInternal } from '../src/metadata';\nimport {\n  uploadBytes as uploadBytesInternal,\n  uploadBytesResumable as uploadBytesResumableInternal,\n  uploadString as uploadStringInternal,\n  getMetadata as getMetadataInternal,\n  updateMetadata as updateMetadataInternal,\n  list as listInternal,\n  listAll as listAllInternal,\n  getDownloadURL as getDownloadURLInternal,\n  deleteObject as deleteObjectInternal,\n  Reference,\n  _getChild as _getChildInternal\n} from '../src/reference';\nimport { STORAGE_TYPE } from './constants';\nimport { getModularInstance } from '@firebase/util';\n\n/**\n * Public types.\n */\nexport * from './public-types';\n\nexport { Location as _Location } from '../src/implementation/location';\nexport { UploadTask as _UploadTask } from '../src/task';\nexport type { Reference as _Reference } from '../src/reference';\nexport { FbsBlob as _FbsBlob } from '../src/implementation/blob';\n\n/**\n * Uploads data to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadBytes(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadBytesInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads a string to this object's location.\n * The upload is not resumable.\n * @public\n * @param ref - StorageReference where string should be uploaded.\n * @param value - The string to upload.\n * @param format - The format of the string to upload.\n * @param metadata - Metadata for the string to upload.\n * @returns A Promise containing an UploadResult\n */\nexport function uploadString(\n  ref: StorageReference,\n  value: string,\n  format?: string,\n  metadata?: UploadMetadata\n): Promise<UploadResult> {\n  ref = getModularInstance(ref);\n  return uploadStringInternal(\n    ref as Reference,\n    value,\n    format,\n    metadata as MetadataInternal\n  );\n}\n\n/**\n * Uploads data to this object's location.\n * The upload can be paused and resumed, and exposes progress updates.\n * @public\n * @param ref - StorageReference where data should be uploaded.\n * @param data - The data to upload.\n * @param metadata - Metadata for the data to upload.\n * @returns An UploadTask\n */\nexport function uploadBytesResumable(\n  ref: StorageReference,\n  data: Blob | Uint8Array | ArrayBuffer,\n  metadata?: UploadMetadata\n): UploadTask {\n  ref = getModularInstance(ref);\n  return uploadBytesResumableInternal(\n    ref as Reference,\n    data,\n    metadata as MetadataInternal\n  ) as UploadTask;\n}\n\n/**\n * A promise that resolves with the metadata for this object. If this\n * object doesn't exist or metadata cannot be retreived, the promise is\n * rejected.\n * @public\n * @param ref - StorageReference to get metadata from.\n */\nexport function getMetadata(ref: StorageReference): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return getMetadataInternal(ref as Reference) as Promise<FullMetadata>;\n}\n\n/**\n * Updates the metadata for this object.\n * @public\n * @param ref - StorageReference to update metadata for.\n * @param metadata - The new metadata for the object.\n *     Only values that have been explicitly set will be changed. Explicitly\n *     setting a value to null will remove the metadata.\n * @returns A promise that resolves with the new metadata for this object.\n */\nexport function updateMetadata(\n  ref: StorageReference,\n  metadata: SettableMetadata\n): Promise<FullMetadata> {\n  ref = getModularInstance(ref);\n  return updateMetadataInternal(\n    ref as Reference,\n    metadata as Partial<MetadataInternal>\n  ) as Promise<FullMetadata>;\n}\n\n/**\n * List items (files) and prefixes (folders) under this storage reference.\n *\n * List API is only available for Firebase Rules Version 2.\n *\n * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n * delimited folder structure.\n * Refer to GCS's List API if you want to learn more.\n *\n * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n * support objects whose paths end with \"/\" or contain two consecutive\n * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n * list() may fail if there are too many unsupported objects in the bucket.\n * @public\n *\n * @param ref - StorageReference to get list from.\n * @param options - See ListOptions for details.\n * @returns A Promise that resolves with the items and prefixes.\n *      `prefixes` contains references to sub-folders and `items`\n *      contains references to objects in this folder. `nextPageToken`\n *      can be used to get the rest of the results.\n */\nexport function list(\n  ref: StorageReference,\n  options?: ListOptions\n): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listInternal(ref as Reference, options);\n}\n\n/**\n * List all items (files) and prefixes (folders) under this storage reference.\n *\n * This is a helper method for calling list() repeatedly until there are\n * no more results. The default pagination size is 1000.\n *\n * Note: The results may not be consistent if objects are changed while this\n * operation is running.\n *\n * Warning: listAll may potentially consume too many resources if there are\n * too many results.\n * @public\n * @param ref - StorageReference to get list from.\n *\n * @returns A Promise that resolves with all the items and prefixes under\n *      the current storage reference. `prefixes` contains references to\n *      sub-directories and `items` contains references to objects in this\n *      folder. `nextPageToken` is never returned.\n */\nexport function listAll(ref: StorageReference): Promise<ListResult> {\n  ref = getModularInstance(ref);\n  return listAllInternal(ref as Reference);\n}\n\n/**\n * Returns the download URL for the given Reference.\n * @public\n * @returns A promise that resolves with the download\n *     URL for this object.\n */\nexport function getDownloadURL(ref: StorageReference): Promise<string> {\n  ref = getModularInstance(ref);\n  return getDownloadURLInternal(ref as Reference);\n}\n\n/**\n * Deletes the object at this location.\n * @public\n * @param ref - StorageReference for object to delete.\n * @returns A promise that resolves if the deletion succeeds.\n */\nexport function deleteObject(ref: StorageReference): Promise<void> {\n  ref = getModularInstance(ref);\n  return deleteObjectInternal(ref as Reference);\n}\n\n/**\n * Returns a StorageReference for the given url.\n * @param storage - `StorageService` instance.\n * @param url - URL. If empty, returns root reference.\n * @public\n */\nexport function ref(storage: StorageService, url?: string): StorageReference;\n/**\n * Returns a StorageReference for the given path in the\n * default bucket.\n * @param storageOrRef - `StorageService` or `StorageReference`.\n * @param pathOrUrlStorage - path. If empty, returns root reference (if Storage\n * instance provided) or returns same reference (if Reference provided).\n * @public\n */\nexport function ref(\n  storageOrRef: StorageService | StorageReference,\n  path?: string\n): StorageReference;\nexport function ref(\n  serviceOrRef: StorageService | StorageReference,\n  pathOrUrl?: string\n): StorageReference | null {\n  serviceOrRef = getModularInstance(serviceOrRef);\n  return refInternal(\n    serviceOrRef as StorageServiceInternal | Reference,\n    pathOrUrl\n  );\n}\n\n/**\n * @internal\n */\nexport function _getChild(ref: StorageReference, childPath: string): Reference {\n  return _getChildInternal(ref as Reference, childPath);\n}\n\nexport { StringFormat } from '../src/implementation/string';\n\n/**\n * Gets a Firebase StorageService instance for the given Firebase app.\n * @public\n * @param app - Firebase app to get Storage instance for.\n * @param bucketUrl - The gs:// url to your Firebase Storage Bucket.\n * If not passed, uses the app's default Storage Bucket.\n * @returns A Firebase StorageService instance.\n */\nexport function getStorage(\n  app: FirebaseApp = getApp(),\n  bucketUrl?: string\n): StorageService {\n  app = getModularInstance(app);\n  const storageProvider: Provider<'storage-exp'> = _getProvider(\n    app,\n    STORAGE_TYPE\n  );\n  const storageInstance = storageProvider.getImmediate({\n    identifier: bucketUrl\n  });\n  return storageInstance;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UploadTaskSnapshot } from '../exp/api';\nimport { ReferenceCompat } from './reference';\nimport { UploadTaskCompat } from './task';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskSnapshotCompat\n  implements types.UploadTaskSnapshot, Compat<UploadTaskSnapshot> {\n  constructor(\n    readonly _delegate: UploadTaskSnapshot,\n    readonly task: UploadTaskCompat,\n    readonly ref: ReferenceCompat\n  ) {}\n\n  get bytesTransferred(): number {\n    return this._delegate.bytesTransferred;\n  }\n  get metadata(): types.FullMetadata {\n    return this._delegate.metadata as types.FullMetadata;\n  }\n  get state(): string {\n    return this._delegate.state;\n  }\n  get totalBytes(): number {\n    return this._delegate.totalBytes;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  UploadTask,\n  FirebaseStorageError,\n  UploadTaskSnapshot,\n  TaskEvent,\n  StorageObserver\n} from '../exp/api';\nimport { UploadTaskSnapshotCompat } from './tasksnapshot';\nimport { ReferenceCompat } from './reference';\nimport * as types from '@firebase/storage-types';\nimport { Compat } from '@firebase/util';\n\nexport class UploadTaskCompat implements types.UploadTask, Compat<UploadTask> {\n  constructor(\n    readonly _delegate: UploadTask,\n    private readonly _ref: ReferenceCompat\n  ) {}\n\n  get snapshot(): UploadTaskSnapshotCompat {\n    return new UploadTaskSnapshotCompat(\n      this._delegate.snapshot,\n      this,\n      this._ref\n    );\n  }\n\n  cancel = this._delegate.cancel.bind(this._delegate);\n  catch = this._delegate.catch.bind(this._delegate);\n  pause = this._delegate.pause.bind(this._delegate);\n  resume = this._delegate.resume.bind(this._delegate);\n\n  then(\n    onFulfilled?: ((a: UploadTaskSnapshotCompat) => unknown) | null,\n    onRejected?: ((a: FirebaseStorageError) => unknown) | null\n  ): Promise<unknown> {\n    return this._delegate.then(snapshot => {\n      if (onFulfilled) {\n        return onFulfilled(\n          new UploadTaskSnapshotCompat(snapshot, this, this._ref)\n        );\n      }\n    }, onRejected);\n  }\n\n  on(\n    type: TaskEvent,\n    nextOrObserver?:\n      | types.StorageObserver<UploadTaskSnapshotCompat>\n      | null\n      | ((a: UploadTaskSnapshotCompat) => unknown),\n    error?: (error: FirebaseStorageError) => void | null,\n    completed?: () => void | null\n  ): Unsubscribe | Subscribe<UploadTaskSnapshotCompat> {\n    let wrappedNextOrObserver:\n      | StorageObserver<UploadTaskSnapshot>\n      | undefined\n      | ((a: UploadTaskSnapshot) => unknown) = undefined;\n    if (!!nextOrObserver) {\n      if (typeof nextOrObserver === 'function') {\n        wrappedNextOrObserver = (taskSnapshot: UploadTaskSnapshot) =>\n          nextOrObserver(\n            new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n          );\n      } else {\n        wrappedNextOrObserver = {\n          next: !!nextOrObserver.next\n            ? (taskSnapshot: UploadTaskSnapshot) =>\n                nextOrObserver.next!(\n                  new UploadTaskSnapshotCompat(taskSnapshot, this, this._ref)\n                )\n            : undefined,\n          complete: nextOrObserver.complete || undefined,\n          error: nextOrObserver.error || undefined\n        };\n      }\n    }\n    return this._delegate.on(\n      type,\n      wrappedNextOrObserver,\n      error || undefined,\n      completed || undefined\n    );\n  }\n}\n\n/**\n * Subscribes to an event stream.\n */\nexport type Subscribe<T> = (\n  next?: NextFn<T> | StorageObserver<T>,\n  error?: ErrorFn,\n  complete?: CompleteFn\n) => Unsubscribe;\n\n/**\n * Unsubscribes from a stream.\n */\nexport type Unsubscribe = () => void;\n\n/**\n * Function that is called once for each value in a stream of values.\n */\nexport type NextFn<T> = (value: T) => void;\n\n/**\n * A function that is called with a `FirebaseStorageError`\n * if the event stream ends due to an error.\n */\nexport type ErrorFn = (error: FirebaseStorageError) => void;\n\n/**\n * A function that is called if the event stream ends normally.\n */\nexport type CompleteFn = () => void;\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { ListResult } from '../exp/api';\nimport * as types from '@firebase/storage-types';\nimport { ReferenceCompat } from './reference';\nimport { StorageServiceCompat } from './service';\nimport { Compat } from '@firebase/util';\n\nexport class ListResultCompat implements types.ListResult, Compat<ListResult> {\n  constructor(\n    readonly _delegate: ListResult,\n    private readonly _service: StorageServiceCompat\n  ) {}\n\n  get prefixes(): ReferenceCompat[] {\n    return this._delegate.prefixes.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get items(): ReferenceCompat[] {\n    return this._delegate.items.map(\n      ref => new ReferenceCompat(ref, this._service)\n    );\n  }\n  get nextPageToken(): string | null {\n    return this._delegate.nextPageToken || null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *  http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  StorageReference,\n  uploadBytesResumable,\n  list,\n  listAll,\n  getDownloadURL,\n  getMetadata,\n  updateMetadata,\n  deleteObject,\n  UploadTask,\n  StringFormat,\n  _UploadTask,\n  _getChild,\n  _Reference,\n  _FbsBlob\n} from '../exp/api'; // import from the exp public API\n\nimport { UploadTaskCompat } from './task';\nimport { ListResultCompat } from './list';\nimport { StorageServiceCompat } from './service';\n\nimport * as types from '@firebase/storage-types';\nimport { Metadata } from '../src/metadata';\nimport { dataFromString } from '../src/implementation/string';\nimport { invalidRootOperation } from '../src/implementation/error';\nimport { Compat } from '@firebase/util';\n\nexport class ReferenceCompat\n  implements types.Reference, Compat<StorageReference> {\n  constructor(\n    readonly _delegate: StorageReference,\n    public storage: StorageServiceCompat\n  ) {}\n\n  get name(): string {\n    return this._delegate.name;\n  }\n\n  get bucket(): string {\n    return this._delegate.bucket;\n  }\n\n  get fullPath(): string {\n    return this._delegate.fullPath;\n  }\n\n  toString(): string {\n    return this._delegate.toString();\n  }\n\n  /**\n   * @returns A reference to the object obtained by\n   * appending childPath, removing any duplicate, beginning, or trailing\n   * slashes.\n   */\n  child(childPath: string): types.Reference {\n    const reference = _getChild(this._delegate, childPath);\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  get root(): types.Reference {\n    return new ReferenceCompat(this._delegate.root, this.storage);\n  }\n\n  /**\n   * @returns A reference to the parent of the\n   * current object, or null if the current object is the root.\n   */\n  get parent(): types.Reference | null {\n    const reference = this._delegate.parent;\n    if (reference == null) {\n      return null;\n    }\n    return new ReferenceCompat(reference, this.storage);\n  }\n\n  /**\n   * Uploads a blob to this object's location.\n   * @param data - The blob to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  put(\n    data: Blob | Uint8Array | ArrayBuffer,\n    metadata?: types.FullMetadata\n  ): types.UploadTask {\n    this._throwIfRoot('put');\n    return new UploadTaskCompat(\n      uploadBytesResumable(this._delegate, data, metadata as Metadata),\n      this\n    );\n  }\n\n  /**\n   * Uploads a string to this object's location.\n   * @param value - The string to upload.\n   * @param format - The format of the string to upload.\n   * @returns An UploadTask that lets you control and\n   * observe the upload.\n   */\n  putString(\n    value: string,\n    format: StringFormat = StringFormat.RAW,\n    metadata?: Metadata\n  ): types.UploadTask {\n    this._throwIfRoot('putString');\n    const data = dataFromString(format, value);\n    const metadataClone = { ...metadata } as Metadata;\n    if (metadataClone['contentType'] == null && data.contentType != null) {\n      metadataClone['contentType'] = data.contentType;\n    }\n    return new UploadTaskCompat(\n      new _UploadTask(\n        this._delegate as _Reference,\n        new _FbsBlob(data.data, true),\n        metadataClone\n      ) as UploadTask,\n      this\n    );\n  }\n\n  /**\n   * List all items (files) and prefixes (folders) under this storage reference.\n   *\n   * This is a helper method for calling list() repeatedly until there are\n   * no more results. The default pagination size is 1000.\n   *\n   * Note: The results may not be consistent if objects are changed while this\n   * operation is running.\n   *\n   * Warning: listAll may potentially consume too many resources if there are\n   * too many results.\n   *\n   * @returns A Promise that resolves with all the items and prefixes under\n   *  the current storage reference. `prefixes` contains references to\n   *  sub-directories and `items` contains references to objects in this\n   *  folder. `nextPageToken` is never returned.\n   */\n  listAll(): Promise<types.ListResult> {\n    return listAll(this._delegate).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * List items (files) and prefixes (folders) under this storage reference.\n   *\n   * List API is only available for Firebase Rules Version 2.\n   *\n   * GCS is a key-blob store. Firebase Storage imposes the semantic of '/'\n   * delimited folder structure. Refer to GCS's List API if you want to learn more.\n   *\n   * To adhere to Firebase Rules's Semantics, Firebase Storage does not\n   * support objects whose paths end with \"/\" or contain two consecutive\n   * \"/\"s. Firebase Storage List API will filter these unsupported objects.\n   * list() may fail if there are too many unsupported objects in the bucket.\n   *\n   * @param options - See ListOptions for details.\n   * @returns A Promise that resolves with the items and prefixes.\n   * `prefixes` contains references to sub-folders and `items`\n   * contains references to objects in this folder. `nextPageToken`\n   * can be used to get the rest of the results.\n   */\n  list(options?: types.ListOptions | null): Promise<types.ListResult> {\n    return list(this._delegate, options || undefined).then(\n      r => new ListResultCompat(r, this.storage)\n    );\n  }\n\n  /**\n   * A promise that resolves with the metadata for this object. If this\n   * object doesn't exist or metadata cannot be retreived, the promise is\n   * rejected.\n   */\n  getMetadata(): Promise<types.FullMetadata> {\n    return getMetadata(this._delegate) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * Updates the metadata for this object.\n   * @param metadata - The new metadata for the object.\n   * Only values that have been explicitly set will be changed. Explicitly\n   * setting a value to null will remove the metadata.\n   * @returns A promise that resolves\n   * with the new metadata for this object.\n   * @see firebaseStorage.Reference.prototype.getMetadata\n   */\n  updateMetadata(\n    metadata: types.SettableMetadata\n  ): Promise<types.FullMetadata> {\n    return updateMetadata(\n      this._delegate,\n      metadata as Metadata\n    ) as Promise<types.FullMetadata>;\n  }\n\n  /**\n   * @returns A promise that resolves with the download\n   * URL for this object.\n   */\n  getDownloadURL(): Promise<string> {\n    return getDownloadURL(this._delegate);\n  }\n\n  /**\n   * Deletes the object at this location.\n   * @returns A promise that resolves if the deletion succeeds.\n   */\n  delete(): Promise<void> {\n    this._throwIfRoot('delete');\n    return deleteObject(this._delegate);\n  }\n\n  private _throwIfRoot(name: string): void {\n    if ((this._delegate as _Reference)._location.path === '') {\n      throw invalidRootOperation(name);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as types from '@firebase/storage-types';\nimport { FirebaseApp } from '@firebase/app-types';\n\nimport { StorageService, ref, _Location } from '../exp/api'; // import from the exp public API\nimport { ReferenceCompat } from './reference';\nimport { isUrl } from '../src/service';\nimport { invalidArgument } from '../src/implementation/error';\nimport { Compat } from '@firebase/util';\n\n/**\n * A service that provides firebaseStorage.Reference instances.\n * @param opt_url gs:// url to a custom Storage Bucket\n */\nexport class StorageServiceCompat\n  implements types.FirebaseStorage, Compat<StorageService> {\n  constructor(public app: FirebaseApp, readonly _delegate: StorageService) {}\n\n  INTERNAL = {\n    /**\n     * Called when the associated app is deleted.\n     */\n    delete: () => {\n      return this._delegate._delete();\n    }\n  };\n\n  get maxOperationRetryTime(): number {\n    return this._delegate.maxOperationRetryTime;\n  }\n\n  get maxUploadRetryTime(): number {\n    return this._delegate.maxUploadRetryTime;\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference for the given path in the default\n   * bucket.\n   */\n  ref(path?: string): types.Reference {\n    if (isUrl(path)) {\n      throw invalidArgument(\n        'ref() expected a child path but got a URL, use refFromURL instead.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, path), this);\n  }\n\n  /**\n   * Returns a firebaseStorage.Reference object for the given absolute URL,\n   * which must be a gs:// or http[s]:// URL.\n   */\n  refFromURL(url: string): types.Reference {\n    if (!isUrl(url)) {\n      throw invalidArgument(\n        'refFromURL() expected a full URL but got a child path, use ref() instead.'\n      );\n    }\n    try {\n      _Location.makeFromUrl(url);\n    } catch (e) {\n      throw invalidArgument(\n        'refFromUrl() expected a valid full URL but got an invalid one.'\n      );\n    }\n    return new ReferenceCompat(ref(this._delegate, url), this);\n  }\n\n  setMaxUploadRetryTime(time: number): void {\n    this._delegate.maxUploadRetryTime = time;\n  }\n\n  setMaxOperationRetryTime(time: number): void {\n    this._delegate.maxOperationRetryTime = time;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { StringFormat } from './src/implementation/string';\nimport { TaskEvent, TaskState } from './src/implementation/taskenums';\n\nimport { XhrIoPool } from './src/implementation/xhriopool';\nimport { ReferenceCompat } from './compat/reference';\nimport { StorageServiceCompat } from './compat/service';\nimport { StorageService } from './src/service';\nimport * as types from '@firebase/storage-types';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer,\n  InstanceFactoryOptions\n} from '@firebase/component';\n\nimport { name, version } from './package.json';\n\nimport './register-module';\n\n/**\n * Type constant for Firebase Storage.\n */\nconst STORAGE_TYPE = 'storage';\n\nfunction factory(\n  container: ComponentContainer,\n  { instanceIdentifier: url }: InstanceFactoryOptions\n): types.FirebaseStorage {\n  // Dependencies\n  // TODO: This should eventually be 'app-compat'\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n\n  // TODO: get StorageService instance from component framework instead\n  // of creating a new one.\n  const storageServiceCompat: StorageServiceCompat = new StorageServiceCompat(\n    app,\n    new StorageService(\n      app,\n      authProvider,\n      new XhrIoPool(),\n      url,\n      firebase.SDK_VERSION\n    )\n  );\n  return storageServiceCompat;\n}\n\nexport function registerStorage(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    TaskState,\n    TaskEvent,\n    StringFormat,\n    Storage: StorageService,\n    Reference: ReferenceCompat\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(STORAGE_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterStorage(firebase as _FirebaseNamespace);\n"],"sourceRoot":""}